
alarmClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800118  00800118  00000f04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001226  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f95  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052b  00000000  00000000  000042f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000481f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <main>
  9e:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialization>:
 uint16_t cycle = LONG_DELAY + 10;


 void initialization()
 {
	initBoard();
  a6:	0e 94 14 03 	call	0x628	; 0x628 <initBoard>
	initDisplay();
  aa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <initDisplay>
	initTimer();
  ae:	0e 94 02 05 	call	0xa04	; 0xa04 <initTimer>
	AppKey_Init();
  b2:	0e 94 21 03 	call	0x642	; 0x642 <AppKey_Init>
	beepTimerInit();
  b6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <beepTimerInit>
  ba:	08 95       	ret

000000bc <keyProcess>:
	keyProcess();
}

void keyProcess()
{
	nEvent1 = AppKey_GetKeyEvent(0);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 33 03 	call	0x666	; 0x666 <AppKey_GetKeyEvent>
  c2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <nEvent1>
	nEvent2 = AppKey_GetKeyEvent(1);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 33 03 	call	0x666	; 0x666 <AppKey_GetKeyEvent>
  cc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <nEvent2>

	uint16_t tmp;

	if (nEvent1 == KEY_EV_LONG && nEvent2 == KEY_EV_LONG)
  d0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <nEvent1>
  d4:	92 30       	cpi	r25, 0x02	; 2
  d6:	09 f0       	breq	.+2      	; 0xda <keyProcess+0x1e>
  d8:	c4 c0       	rjmp	.+392    	; 0x262 <keyProcess+0x1a6>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	f1 f5       	brne	.+124    	; 0x15a <keyProcess+0x9e>
	{
		if (alFlag == 1)
  de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	09 f0       	breq	.+2      	; 0xe8 <keyProcess+0x2c>
  e6:	0c c1       	rjmp	.+536    	; 0x300 <keyProcess+0x244>
		{
			longCancel--;
  e8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <longCancel>
  ec:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <longCancel+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
			if (longCancel > 3000)
  f2:	89 3b       	cpi	r24, 0xB9	; 185
  f4:	2b e0       	ldi	r18, 0x0B	; 11
  f6:	92 07       	cpc	r25, r18
  f8:	28 f4       	brcc	.+10     	; 0x104 <keyProcess+0x48>

	if (nEvent1 == KEY_EV_LONG && nEvent2 == KEY_EV_LONG)
	{
		if (alFlag == 1)
		{
			longCancel--;
  fa:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <longCancel+0x1>
  fe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <longCancel>
 102:	08 95       	ret
			if (longCancel > 3000)
			{
				longCancel = 0;
 104:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <longCancel+0x1>
 108:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <longCancel>
 10c:	08 95       	ret
	}
	else
	{
		if (nEvent1 == KEY_EV_SHORT)
		{
			if (menu == 0)
 10e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <menu>
 112:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <menu+0x1>
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	39 f4       	brne	.+14     	; 0x128 <keyProcess+0x6c>
			{
				menu = 10;
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 122:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
 126:	15 c0       	rjmp	.+42     	; 0x152 <keyProcess+0x96>
			}
			else if (menu == 5) {}
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	91 05       	cpc	r25, r1
 12c:	09 f4       	brne	.+2      	; 0x130 <keyProcess+0x74>
 12e:	df c0       	rjmp	.+446    	; 0x2ee <keyProcess+0x232>
			else if (menu == 10 || menu == 20)
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	91 05       	cpc	r25, r1
 134:	09 f4       	brne	.+2      	; 0x138 <keyProcess+0x7c>
 136:	99 c0       	rjmp	.+306    	; 0x26a <keyProcess+0x1ae>
 138:	44 97       	sbiw	r24, 0x14	; 20
 13a:	09 f4       	brne	.+2      	; 0x13e <keyProcess+0x82>
 13c:	b7 c0       	rjmp	.+366    	; 0x2ac <keyProcess+0x1f0>
						break;
				}
			}
			else
			{
				if (orientation == 1)
 13e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <orientation>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <keyProcess+0x90>
				{
					orientation = 0;
 146:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <orientation>
 14a:	03 c0       	rjmp	.+6      	; 0x152 <keyProcess+0x96>
				}
				else
				{
					orientation = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <orientation>
				}
			}
		}
		if (nEvent1 == KEY_EV_LONG)
 152:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <nEvent1>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	51 f4       	brne	.+20     	; 0x16e <keyProcess+0xb2>
		{
			menu = 0;
 15a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <menu+0x1>
 15e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <menu>
		}

		if (nEvent2 == KEY_EV_SHORT)
 162:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <nEvent2>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f0       	breq	.+2      	; 0x16c <keyProcess+0xb0>
 16a:	c7 c0       	rjmp	.+398    	; 0x2fa <keyProcess+0x23e>
 16c:	0a c0       	rjmp	.+20     	; 0x182 <keyProcess+0xc6>
 16e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <nEvent2>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	b9 f5       	brne	.+110    	; 0x1e4 <keyProcess+0x128>
		{
			if (menu == 0)
 176:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <menu>
 17a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <menu+0x1>
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	69 f4       	brne	.+26     	; 0x19c <keyProcess+0xe0>
			{
				menu = 5;
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 18a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
				ttt = 1000;//show alarm
 18e:	88 ee       	ldi	r24, 0xE8	; 232
 190:	93 e0       	ldi	r25, 0x03	; 3
 192:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <ttt+0x1>
 196:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ttt>
 19a:	08 95       	ret
			}
			else if (menu == 5) {}
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	91 05       	cpc	r25, r1
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <keyProcess+0xe8>
 1a2:	ae c0       	rjmp	.+348    	; 0x300 <keyProcess+0x244>
			else if (menu == 10)
 1a4:	8a 30       	cpi	r24, 0x0A	; 10
 1a6:	91 05       	cpc	r25, r1
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <keyProcess+0xfc>
			{
				menu = menu + 10;
 1aa:	84 e1       	ldi	r24, 0x14	; 20
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 1b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
 1b6:	08 95       	ret
			}
			else if (menu == 20)
 1b8:	44 97       	sbiw	r24, 0x14	; 20
 1ba:	39 f4       	brne	.+14     	; 0x1ca <keyProcess+0x10e>
			{
				menu = 10;
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 1c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
 1c8:	08 95       	ret
			}
			else
			{
				par = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <par+0x1>
 1d2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <par>
				cycle = LONG_DELAY + 10;
 1d6:	8a e5       	ldi	r24, 0x5A	; 90
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 1de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
 1e2:	08 95       	ret
			}
		}

		if (nEvent2 == KEY_EV_LONG)
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	09 f0       	breq	.+2      	; 0x1ea <keyProcess+0x12e>
 1e8:	8b c0       	rjmp	.+278    	; 0x300 <keyProcess+0x244>
		{
			if (menu == 0)
 1ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <menu>
 1ee:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <menu+0x1>
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	61 f4       	brne	.+24     	; 0x20e <keyProcess+0x152>
			{
				longCancel = 2000;
 1f6:	80 ed       	ldi	r24, 0xD0	; 208
 1f8:	97 e0       	ldi	r25, 0x07	; 7
 1fa:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <longCancel+0x1>
 1fe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <longCancel>
				alFlag = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
				startAlarm();//set alarm
 208:	0e 94 a1 05 	call	0xb42	; 0xb42 <startAlarm>
 20c:	08 95       	ret
			}
			else if (menu == 5) {}
 20e:	85 30       	cpi	r24, 0x05	; 5
 210:	91 05       	cpc	r25, r1
 212:	09 f4       	brne	.+2      	; 0x216 <keyProcess+0x15a>
 214:	75 c0       	rjmp	.+234    	; 0x300 <keyProcess+0x244>
			else if (menu == 10)
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	91 05       	cpc	r25, r1
 21a:	39 f4       	brne	.+14     	; 0x22a <keyProcess+0x16e>
			{
				menu = menu + 10;
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 224:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
 228:	08 95       	ret
			}
			else if (menu == 20)
 22a:	44 97       	sbiw	r24, 0x14	; 20
 22c:	39 f4       	brne	.+14     	; 0x23c <keyProcess+0x180>
			{
				menu = 10;
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 236:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
 23a:	08 95       	ret
			}
			else
			{
				par = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <par+0x1>
 244:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <par>
				if (cycle > LONG_DELAY + 5)
 248:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 24c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 250:	86 35       	cpi	r24, 0x56	; 86
 252:	91 05       	cpc	r25, r1
 254:	08 f4       	brcc	.+2      	; 0x258 <keyProcess+0x19c>
 256:	54 c0       	rjmp	.+168    	; 0x300 <keyProcess+0x244>
				{
					cycle = 0;
 258:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <cycle+0x1>
 25c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cycle>
 260:	08 95       	ret
		}
		
	}
	else
	{
		if (nEvent1 == KEY_EV_SHORT)
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	09 f0       	breq	.+2      	; 0x268 <keyProcess+0x1ac>
 266:	83 cf       	rjmp	.-250    	; 0x16e <keyProcess+0xb2>
 268:	52 cf       	rjmp	.-348    	; 0x10e <keyProcess+0x52>
				menu = 10;
			}
			else if (menu == 5) {}
			else if (menu == 10 || menu == 20)
			{
				menu =  menu * 10;
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 272:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
				switch (menu)
				{
					case 100 :
						tmp = getAlarmTime();
 276:	0e 94 d1 05 	call	0xba2	; 0xba2 <getAlarmTime>
 27a:	ac 01       	movw	r20, r24
						tempAlHour = tmp / 100;
 27c:	9c 01       	movw	r18, r24
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	ab e7       	ldi	r26, 0x7B	; 123
 288:	b4 e1       	ldi	r27, 0x14	; 20
 28a:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <tempAlHour>
						tempAlMin = tmp % 100;
 296:	64 e6       	ldi	r22, 0x64	; 100
 298:	68 9f       	mul	r22, r24
 29a:	90 01       	movw	r18, r0
 29c:	69 9f       	mul	r22, r25
 29e:	30 0d       	add	r19, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	42 1b       	sub	r20, r18
 2a4:	53 0b       	sbc	r21, r19
 2a6:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <tempAlMin>
						break;
 2aa:	53 cf       	rjmp	.-346    	; 0x152 <keyProcess+0x96>
				menu = 10;
			}
			else if (menu == 5) {}
			else if (menu == 10 || menu == 20)
			{
				menu =  menu * 10;
 2ac:	88 ec       	ldi	r24, 0xC8	; 200
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <menu+0x1>
 2b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <menu>
						tempAlHour = tmp / 100;
						tempAlMin = tmp % 100;
						break;

					case 200 :
						tmp = getTime();
 2b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <getTime>
 2bc:	ac 01       	movw	r20, r24
						tempHour = tmp / 100;
 2be:	9c 01       	movw	r18, r24
 2c0:	36 95       	lsr	r19
 2c2:	27 95       	ror	r18
 2c4:	36 95       	lsr	r19
 2c6:	27 95       	ror	r18
 2c8:	ab e7       	ldi	r26, 0x7B	; 123
 2ca:	b4 e1       	ldi	r27, 0x14	; 20
 2cc:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tempHour>
						tempMin = tmp % 100;
 2d8:	64 e6       	ldi	r22, 0x64	; 100
 2da:	68 9f       	mul	r22, r24
 2dc:	90 01       	movw	r18, r0
 2de:	69 9f       	mul	r22, r25
 2e0:	30 0d       	add	r19, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	42 1b       	sub	r20, r18
 2e6:	53 0b       	sbc	r21, r19
 2e8:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <tempMin>
						break;
 2ec:	32 cf       	rjmp	.-412    	; 0x152 <keyProcess+0x96>
		if (nEvent1 == KEY_EV_LONG)
		{
			menu = 0;
		}

		if (nEvent2 == KEY_EV_SHORT)
 2ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <nEvent2>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <keyProcess+0x23c>
 2f6:	76 cf       	rjmp	.-276    	; 0x1e4 <keyProcess+0x128>
 2f8:	08 95       	ret
				par = 1;
				cycle = LONG_DELAY + 10;
			}
		}

		if (nEvent2 == KEY_EV_LONG)
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	09 f4       	brne	.+2      	; 0x300 <keyProcess+0x244>
 2fe:	7b cf       	rjmp	.-266    	; 0x1f6 <keyProcess+0x13a>
 300:	08 95       	ret

00000302 <mainApp>:
 }


void mainApp()
{
	timerProcess();
 302:	0e 94 21 05 	call	0xa42	; 0xa42 <timerProcess>
	displayProcess();
 306:	0e 94 44 04 	call	0x888	; 0x888 <displayProcess>

	if (alFlag == 1 && longCancel == 0)
 30a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	a1 f4       	brne	.+40     	; 0x33a <mainApp+0x38>
 312:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <longCancel>
 316:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <longCancel+0x1>
 31a:	89 2b       	or	r24, r25
 31c:	71 f4       	brne	.+28     	; 0x33a <mainApp+0x38>
	{
		alFlag = 0;
 31e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		stopAlarm();
 322:	0e 94 9d 05 	call	0xb3a	; 0xb3a <stopAlarm>
		SET_D5;
 326:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	99 e5       	ldi	r25, 0x59	; 89
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <mainApp+0x2c>
 336:	00 c0       	rjmp	.+0      	; 0x338 <mainApp+0x36>
 338:	00 00       	nop
		_delay_ms(2000);
	}

	switch (menu)
 33a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <menu>
 33e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <menu+0x1>
 342:	8a 30       	cpi	r24, 0x0A	; 10
 344:	91 05       	cpc	r25, r1
 346:	79 f1       	breq	.+94     	; 0x3a6 <mainApp+0xa4>
 348:	28 f4       	brcc	.+10     	; 0x354 <mainApp+0x52>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	79 f0       	breq	.+30     	; 0x36c <mainApp+0x6a>
 34e:	05 97       	sbiw	r24, 0x05	; 5
 350:	a9 f0       	breq	.+42     	; 0x37c <mainApp+0x7a>
 352:	33 c1       	rjmp	.+614    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
 354:	84 36       	cpi	r24, 0x64	; 100
 356:	91 05       	cpc	r25, r1
 358:	09 f4       	brne	.+2      	; 0x35c <mainApp+0x5a>
 35a:	4a c0       	rjmp	.+148    	; 0x3f0 <mainApp+0xee>
 35c:	88 3c       	cpi	r24, 0xC8	; 200
 35e:	91 05       	cpc	r25, r1
 360:	09 f4       	brne	.+2      	; 0x364 <mainApp+0x62>
 362:	b9 c0       	rjmp	.+370    	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
 364:	44 97       	sbiw	r24, 0x14	; 20
 366:	09 f0       	breq	.+2      	; 0x36a <mainApp+0x68>
 368:	28 c1       	rjmp	.+592    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
 36a:	31 c0       	rjmp	.+98     	; 0x3ce <mainApp+0xcc>
	{
		case 0 :
			getFlag(7);
 36c:	87 e0       	ldi	r24, 0x07	; 7
 36e:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
			displayTime(getTime());
 372:	0e 94 c6 05 	call	0xb8c	; 0xb8c <getTime>
 376:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
			break;
 37a:	1f c1       	rjmp	.+574    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

		case 5 :
			displayTime(getAlarmTime());
 37c:	0e 94 d1 05 	call	0xba2	; 0xba2 <getAlarmTime>
 380:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
			if (ttt == 0)
 384:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ttt>
 388:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ttt+0x1>
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	29 f4       	brne	.+10     	; 0x39a <mainApp+0x98>
			{
				menu = 0;
 390:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <menu+0x1>
 394:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <menu>
 398:	10 c1       	rjmp	.+544    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
			}
			else ttt--;
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <ttt+0x1>
 3a0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ttt>
 3a4:	0a c1       	rjmp	.+532    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
			break;


		case 10 :
			getFlag(3);
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
			displayMenu(SYM_A, 3);
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(SYM_L, 2);
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(NONE, 1);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8f e0       	ldi	r24, 0x0F	; 15
 3c0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(NONE, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8f e0       	ldi	r24, 0x0F	; 15
 3c8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			break;
 3cc:	f6 c0       	rjmp	.+492    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

		case 20 :
			displayMenu(SYM_C, 3);
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	8b e0       	ldi	r24, 0x0B	; 11
 3d2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(SYM_L, 2);
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	8c e0       	ldi	r24, 0x0C	; 12
 3da:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(NONE, 1);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			displayMenu(NONE, 0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	8f e0       	ldi	r24, 0x0F	; 15
 3ea:	0e 94 f7 04 	call	0x9ee	; 0x9ee <displayMenu>
			break;
 3ee:	e5 c0       	rjmp	.+458    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>

		case 100 :
			if (orientation == 0)
 3f0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <orientation>
 3f4:	81 11       	cpse	r24, r1
 3f6:	36 c0       	rjmp	.+108    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
			{
				getFlag(1);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
				if (par == 1)
 3fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <par>
 402:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <par+0x1>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	11 f5       	brne	.+68     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
				{
					par = 0;
 40a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <par+0x1>
 40e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <par>
					if (cycle > LONG_DELAY)
 412:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 416:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 41a:	81 35       	cpi	r24, 0x51	; 81
 41c:	91 05       	cpc	r25, r1
 41e:	60 f0       	brcs	.+24     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
					{
						cycle = LONG_DELAY + 10;
 420:	8a e5       	ldi	r24, 0x5A	; 90
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 428:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
						tempAlMin++;
 42c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tempAlMin>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <tempAlMin>
 436:	05 c0       	rjmp	.+10     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
					}
					else cycle++;
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 43e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
					
					if (tempAlMin > 59)
 442:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tempAlMin>
 446:	8c 33       	cpi	r24, 0x3C	; 60
 448:	10 f0       	brcs	.+4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
					{
						tempAlMin = 0;
 44a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <tempAlMin>
					}
				}
				displayTime((uint16_t)tempAlMin);
 44e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tempAlMin>
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
				setAlarmTime(tempAlMin, 0);
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tempAlMin>
 45e:	0e 94 be 05 	call	0xb7c	; 0xb7c <setAlarmTime>
 462:	ab c0       	rjmp	.+342    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
			}
			else
			{
				getFlag(2);
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
				if (par == 1)
 46a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <par>
 46e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <par+0x1>
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	11 f5       	brne	.+68     	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
				{
					par = 0;
 476:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <par+0x1>
 47a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <par>
					if (cycle > LONG_DELAY)
 47e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 482:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 486:	81 35       	cpi	r24, 0x51	; 81
 488:	91 05       	cpc	r25, r1
 48a:	60 f0       	brcs	.+24     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
					{
						cycle = LONG_DELAY + 10;
 48c:	8a e5       	ldi	r24, 0x5A	; 90
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 494:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
						tempAlHour++;
 498:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tempAlHour>
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <tempAlHour>
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
					}
					else cycle++;
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 4aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
					if (tempAlHour > 23)
 4ae:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tempAlHour>
 4b2:	88 31       	cpi	r24, 0x18	; 24
 4b4:	10 f0       	brcs	.+4      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
					{
						tempAlHour = 0;
 4b6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <tempAlHour>
					}
				}
				displayTime((uint16_t)tempAlHour * 100);
 4ba:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tempAlHour>
 4be:	24 e6       	ldi	r18, 0x64	; 100
 4c0:	82 9f       	mul	r24, r18
 4c2:	c0 01       	movw	r24, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
				setAlarmTime(tempAlHour, 1);
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <tempAlHour>
 4d0:	0e 94 be 05 	call	0xb7c	; 0xb7c <setAlarmTime>
 4d4:	72 c0       	rjmp	.+228    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
			}
			break;

		case 200 :
			if (orientation == 0)
 4d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <orientation>
 4da:	81 11       	cpse	r24, r1
 4dc:	36 c0       	rjmp	.+108    	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
			{
				getFlag(1);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
				if (par == 1)
 4e4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <par>
 4e8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <par+0x1>
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	11 f5       	brne	.+68     	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
				{
					par = 0;
 4f0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <par+0x1>
 4f4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <par>
					if (cycle > LONG_DELAY)
 4f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 4fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 500:	81 35       	cpi	r24, 0x51	; 81
 502:	91 05       	cpc	r25, r1
 504:	60 f0       	brcs	.+24     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
					{
						cycle = LONG_DELAY + 10;
 506:	8a e5       	ldi	r24, 0x5A	; 90
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 50e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
						tempMin++;
 512:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tempMin>
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <tempMin>
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
					}
					else cycle++;
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 524:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
					
					if (tempMin > 59)
 528:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tempMin>
 52c:	8c 33       	cpi	r24, 0x3C	; 60
 52e:	10 f0       	brcs	.+4      	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
					{
						tempMin = 0;
 530:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <tempMin>
					}
				}
				displayTime((uint16_t)tempMin);
 534:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tempMin>
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
				setTime(tempMin, 0);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <tempMin>
 544:	0e 94 b4 05 	call	0xb68	; 0xb68 <setTime>
 548:	38 c0       	rjmp	.+112    	; 0x5ba <__FUSE_REGION_LENGTH__+0x1ba>
			}
			else
			{
				getFlag(2);
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 41 04 	call	0x882	; 0x882 <getFlag>
				if (par == 1)
 550:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <par>
 554:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <par+0x1>
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	11 f5       	brne	.+68     	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
				{
					par = 0;
 55c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <par+0x1>
 560:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <par>
					if (cycle > LONG_DELAY) 
 564:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cycle>
 568:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <cycle+0x1>
 56c:	81 35       	cpi	r24, 0x51	; 81
 56e:	91 05       	cpc	r25, r1
 570:	60 f0       	brcs	.+24     	; 0x58a <__FUSE_REGION_LENGTH__+0x18a>
					{
						cycle = LONG_DELAY + 10;
 572:	8a e5       	ldi	r24, 0x5A	; 90
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 57a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
						tempHour++;
 57e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tempHour>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tempHour>
 588:	05 c0       	rjmp	.+10     	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
					}
					else cycle++;
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <cycle+0x1>
 590:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cycle>
					if (tempHour > 23)
 594:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tempHour>
 598:	88 31       	cpi	r24, 0x18	; 24
 59a:	10 f0       	brcs	.+4      	; 0x5a0 <__FUSE_REGION_LENGTH__+0x1a0>
					{
						tempHour = 0;
 59c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <tempHour>
					}
				}
				displayTime((uint16_t)tempHour * 100);
 5a0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tempHour>
 5a4:	24 e6       	ldi	r18, 0x64	; 100
 5a6:	82 9f       	mul	r24, r18
 5a8:	c0 01       	movw	r24, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	0e 94 87 04 	call	0x90e	; 0x90e <displayTime>
				setTime(tempHour, 1);
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tempHour>
 5b6:	0e 94 b4 05 	call	0xb68	; 0xb68 <setTime>
	}
	
	
	
	
	AppKey_Process();
 5ba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <AppKey_Process>
	keyProcess();
 5be:	0e 94 5e 00 	call	0xbc	; 0xbc <keyProcess>
 5c2:	08 95       	ret

000005c4 <beepTimerInit>:

uint8_t beepFlag = 0;

void beepTimerInit()
{
	TCCR0A = 2;
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 255;
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 2;
 5cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCCR0B = 3;
 5d0:	83 e0       	ldi	r24, 0x03	; 3
 5d2:	85 bd       	out	0x25, r24	; 37
 5d4:	08 95       	ret

000005d6 <startBeep>:
}

void startBeep()
{
	beepFlag = 1;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <beepFlag>
 5dc:	08 95       	ret

000005de <stopBeep>:
}

void stopBeep()
{
	beepFlag = 0;
 5de:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <beepFlag>
 5e2:	86 e6       	ldi	r24, 0x66	; 102
 5e4:	9e e0       	ldi	r25, 0x0E	; 14
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <stopBeep+0x8>
 5ea:	00 00       	nop
	_delay_ms(1);
	CLR_PWM;
 5ec:	5f 98       	cbi	0x0b, 7	; 11
	CLR_PWM2;
 5ee:	2a 98       	cbi	0x05, 2	; 5
 5f0:	08 95       	ret

000005f2 <setBeepFreq>:
}

void setBeepFreq(uint8_t freq)
{
	OCR0A = freq;
 5f2:	87 bd       	out	0x27, r24	; 39
 5f4:	08 95       	ret

000005f6 <__vector_14>:
}


ISR(TIMER0_COMPA_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	8f 93       	push	r24
	if (beepFlag == 1)
 602:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <beepFlag>
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	49 f4       	brne	.+18     	; 0x61c <__vector_14+0x26>
	{
		if (IS_PWM_ON)
 60a:	4f 9b       	sbis	0x09, 7	; 9
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__vector_14+0x20>
		{
			CLR_PWM;
 60e:	5f 98       	cbi	0x0b, 7	; 11
			CLR_PWM2;
 610:	2a 98       	cbi	0x05, 2	; 5
			SET_PWM2;
 612:	2a 9a       	sbi	0x05, 2	; 5
 614:	03 c0       	rjmp	.+6      	; 0x61c <__vector_14+0x26>
		}
		else
		{
			CLR_PWM2;
 616:	2a 98       	cbi	0x05, 2	; 5
			CLR_PWM;
 618:	5f 98       	cbi	0x0b, 7	; 11
			SET_PWM;
 61a:	5f 9a       	sbi	0x0b, 7	; 11
		}
	}
 61c:	8f 91       	pop	r24
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <initBoard>:


  void initBoard()
  {
	  #ifdef PORTB_SETTING
	  DDRB  = DDRB_SETTING;														// Set PortB direction register
 628:	8c e1       	ldi	r24, 0x1C	; 28
 62a:	84 b9       	out	0x04, r24	; 4
	  PORTB = PORTB_SETTING;														// Set PortB output register
 62c:	8b ef       	ldi	r24, 0xFB	; 251
 62e:	85 b9       	out	0x05, r24	; 5
	  #endif

	  #ifdef PORTC_SETTING
	  DDRC  = DDRC_SETTING;														// Set PortC direction register
 630:	8f e3       	ldi	r24, 0x3F	; 63
 632:	87 b9       	out	0x07, r24	; 7
	  PORTC = PORTC_SETTING;														// Set PortC output register
 634:	80 ec       	ldi	r24, 0xC0	; 192
 636:	88 b9       	out	0x08, r24	; 8
	  #endif

	  #ifdef PORTD_SETTING
	  DDRD  = DDRD_SETTING;														// Set PortD direction register
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	8a b9       	out	0x0a, r24	; 10
	  PORTD = PORTD_SETTING;														// Set PortD output register
 63c:	8f e1       	ldi	r24, 0x1F	; 31
 63e:	8b b9       	out	0x0b, r24	; 11
 640:	08 95       	ret

00000642 <AppKey_Init>:

 static KeyChannel_t m_pKeys[APP_KEY_COUNT];


 bool_t AppKey_Init()
 {
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 m_pKeys[nIndex].nLastTime = getTimeMs();							// Time stamp of last event
 646:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <getTimeMs>
 64a:	c3 e2       	ldi	r28, 0x23	; 35
 64c:	d1 e0       	ldi	r29, 0x01	; 1
 64e:	99 83       	std	Y+1, r25	; 0x01
 650:	88 83       	st	Y, r24
		 m_pKeys[nIndex].nState = KEY_ST_OFF;									// State of key
 652:	1a 82       	std	Y+2, r1	; 0x02
 {
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 m_pKeys[nIndex].nLastTime = getTimeMs();							// Time stamp of last event
 654:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <getTimeMs>
 658:	9c 83       	std	Y+4, r25	; 0x04
 65a:	8b 83       	std	Y+3, r24	; 0x03
		 m_pKeys[nIndex].nState = KEY_ST_OFF;									// State of key
 65c:	1d 82       	std	Y+5, r1	; 0x05
	 }

	 return TRUE;																// Return success
 }
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <AppKey_GetKeyEvent>:

 uint8_t AppKey_GetKeyEvent(uint8_t nKeyNo)
 {
	 uint8_t nEvent;																// The key event

	 if (nKeyNo >= APP_KEY_COUNT)												// If key no out of range
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	78 f4       	brcc	.+30     	; 0x688 <AppKey_GetKeyEvent+0x22>
	 {
		 return FALSE;															// Return error
	 }

	 nEvent = GET_APP_KEY_EVENT(m_pKeys + nKeyNo);								// Extract the event
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fc 01       	movw	r30, r24
 66e:	ee 0f       	add	r30, r30
 670:	ff 1f       	adc	r31, r31
 672:	8e 0f       	add	r24, r30
 674:	9f 1f       	adc	r25, r31
 676:	fc 01       	movw	r30, r24
 678:	ed 5d       	subi	r30, 0xDD	; 221
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	82 81       	ldd	r24, Z+2	; 0x02
	 SET_APP_KEY_EVENT(m_pKeys + nKeyNo, KEY_EV_NONE);							// Clear the event
 67e:	98 2f       	mov	r25, r24
 680:	90 7f       	andi	r25, 0xF0	; 240
 682:	92 83       	std	Z+2, r25	; 0x02
	 return nEvent;																// Return the event
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	08 95       	ret
 {
	 uint8_t nEvent;																// The key event

	 if (nKeyNo >= APP_KEY_COUNT)												// If key no out of range
	 {
		 return FALSE;															// Return error
 688:	80 e0       	ldi	r24, 0x00	; 0
	 }

	 nEvent = GET_APP_KEY_EVENT(m_pKeys + nKeyNo);								// Extract the event
	 SET_APP_KEY_EVENT(m_pKeys + nKeyNo, KEY_EV_NONE);							// Clear the event
	 return nEvent;																// Return the event
 }
 68a:	08 95       	ret

0000068c <AppKey_IsKeyPressed>:
 ///			FALSE if released and on error

 bool_t AppKey_IsKeyPressed(uint8_t nChannel)
 {

	 switch (nChannel)															// Switch due to channel no.
 68c:	88 23       	and	r24, r24
 68e:	19 f0       	breq	.+6      	; 0x696 <AppKey_IsKeyPressed+0xa>
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	29 f0       	breq	.+10     	; 0x69e <AppKey_IsKeyPressed+0x12>
 694:	0b c0       	rjmp	.+22     	; 0x6ac <AppKey_IsKeyPressed+0x20>
	 {
		 case 0:																	// Case: Channel #0
		 return IS_KEY_PRESSED_0;											// Return key state
 696:	83 b1       	in	r24, 0x03	; 3
 698:	80 95       	com	r24
 69a:	81 70       	andi	r24, 0x01	; 1
 69c:	08 95       	ret

		 case 1:																	// Case: Channel #1
		 return IS_KEY_PRESSED_1;											// Return key state
 69e:	83 b1       	in	r24, 0x03	; 3
 6a0:	81 fb       	bst	r24, 1
 6a2:	99 27       	eor	r25, r25
 6a4:	90 f9       	bld	r25, 0
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	89 27       	eor	r24, r25
 6aa:	08 95       	ret

		 default:																// On any other value
		 return FALSE;														// Return error
 6ac:	80 e0       	ldi	r24, 0x00	; 0
	 }

 6ae:	08 95       	ret

000006b0 <AppKey_ProcessChannel>:
 /// This function has to be called periodically in main level.
 ///
 /// @param[in] nChannel current channel

 void AppKey_ProcessChannel(uint8_t nChannel)
 {
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
	 KeyChannel_t* pThis;														// Pointer to current channel

	 pThis = &m_pKeys[nChannel];													// Get pointer to channel
 6b4:	c8 2f       	mov	r28, r24
 6b6:	d0 e0       	ldi	r29, 0x00	; 0

	 switch (GET_APP_KEY_STATE(pThis))											// Switch due to key state
 6b8:	fe 01       	movw	r30, r28
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	ec 0f       	add	r30, r28
 6c0:	fd 1f       	adc	r31, r29
 6c2:	ed 5d       	subi	r30, 0xDD	; 221
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	92 81       	ldd	r25, Z+2	; 0x02
 6c8:	90 7f       	andi	r25, 0xF0	; 240
 6ca:	90 31       	cpi	r25, 0x10	; 16
 6cc:	d1 f0       	breq	.+52     	; 0x702 <AppKey_ProcessChannel+0x52>
 6ce:	90 34       	cpi	r25, 0x40	; 64
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <AppKey_ProcessChannel+0x24>
 6d2:	57 c0       	rjmp	.+174    	; 0x782 <AppKey_ProcessChannel+0xd2>
 6d4:	91 11       	cpse	r25, r1
 6d6:	6d c0       	rjmp	.+218    	; 0x7b2 <AppKey_ProcessChannel+0x102>
	 {
		 case KEY_ST_OFF:														// State is off, key was up

		 if (AppKey_IsKeyPressed(nChannel))									// If key actually is pressed
 6d8:	0e 94 46 03 	call	0x68c	; 0x68c <AppKey_IsKeyPressed>
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <AppKey_ProcessChannel+0x32>
 6e0:	70 c0       	rjmp	.+224    	; 0x7c2 <AppKey_ProcessChannel+0x112>
		 {
			 pThis->nLastTime = getTimeMs();							// Get current time
 6e2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <getTimeMs>
 6e6:	9e 01       	movw	r18, r28
 6e8:	22 0f       	add	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	c2 0f       	add	r28, r18
 6ee:	d3 1f       	adc	r29, r19
 6f0:	cd 5d       	subi	r28, 0xDD	; 221
 6f2:	de 4f       	sbci	r29, 0xFE	; 254
 6f4:	99 83       	std	Y+1, r25	; 0x01
 6f6:	88 83       	st	Y, r24
			 SET_APP_KEY_STATE(pThis, KEY_ST_NEW);							// Set new state
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	8f 70       	andi	r24, 0x0F	; 15
 6fc:	80 61       	ori	r24, 0x10	; 16
 6fe:	8a 83       	std	Y+2, r24	; 0x02
 700:	60 c0       	rjmp	.+192    	; 0x7c2 <AppKey_ProcessChannel+0x112>

		 break;

		 case KEY_ST_NEW:														// State is new pressed, key was down

		 if (AppKey_IsKeyPressed(nChannel))									// If key still is pressed
 702:	0e 94 46 03 	call	0x68c	; 0x68c <AppKey_IsKeyPressed>
 706:	88 23       	and	r24, r24
 708:	c9 f0       	breq	.+50     	; 0x73c <AppKey_ProcessChannel+0x8c>
		 {
			 if (getDelayMs(pThis->nLastTime)
 70a:	fe 01       	movw	r30, r28
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	ec 0f       	add	r30, r28
 712:	fd 1f       	adc	r31, r29
 714:	ed 5d       	subi	r30, 0xDD	; 221
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	80 81       	ld	r24, Z
 71a:	91 81       	ldd	r25, Z+1	; 0x01
 71c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <getDelayMs>
 720:	85 3f       	cpi	r24, 0xF5	; 245
 722:	91 40       	sbci	r25, 0x01	; 1
 724:	08 f4       	brcc	.+2      	; 0x728 <AppKey_ProcessChannel+0x78>
 726:	4d c0       	rjmp	.+154    	; 0x7c2 <AppKey_ProcessChannel+0x112>
			 > KEY_TIME_LONG)											// If delay is enough
			 {
				 SET_APP_KEY_STATE(pThis, KEY_ST_LONG);						// Set new state
				 SET_APP_KEY_EVENT(pThis, KEY_EV_LONG);						// Set new state
 728:	ce 01       	movw	r24, r28
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	c8 0f       	add	r28, r24
 730:	d9 1f       	adc	r29, r25
 732:	cd 5d       	subi	r28, 0xDD	; 221
 734:	de 4f       	sbci	r29, 0xFE	; 254
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	8a 83       	std	Y+2, r24	; 0x02
 73a:	43 c0       	rjmp	.+134    	; 0x7c2 <AppKey_ProcessChannel+0x112>

		 }
		 else																// If key is released
		 {

			 if (getDelayMs(pThis->nLastTime)
 73c:	fe 01       	movw	r30, r28
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	ec 0f       	add	r30, r28
 744:	fd 1f       	adc	r31, r29
 746:	ed 5d       	subi	r30, 0xDD	; 221
 748:	fe 4f       	sbci	r31, 0xFE	; 254
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <getDelayMs>
 752:	cd 97       	sbiw	r24, 0x3d	; 61
 754:	58 f0       	brcs	.+22     	; 0x76c <AppKey_ProcessChannel+0xbc>
			 > KEY_TIME_SHORT)											// If time is enough
			 {
				 SET_APP_KEY_EVENT(pThis, KEY_EV_SHORT);						// Set new state
 756:	fe 01       	movw	r30, r28
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	ec 0f       	add	r30, r28
 75e:	fd 1f       	adc	r31, r29
 760:	ed 5d       	subi	r30, 0xDD	; 221
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	80 7f       	andi	r24, 0xF0	; 240
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	82 83       	std	Z+2, r24	; 0x02
			 }

			 SET_APP_KEY_STATE(pThis, KEY_ST_OFF);							// Set new state
 76c:	ce 01       	movw	r24, r28
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	c8 0f       	add	r28, r24
 774:	d9 1f       	adc	r29, r25
 776:	cd 5d       	subi	r28, 0xDD	; 221
 778:	de 4f       	sbci	r29, 0xFE	; 254
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	8f 70       	andi	r24, 0x0F	; 15
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	20 c0       	rjmp	.+64     	; 0x7c2 <AppKey_ProcessChannel+0x112>

		 break;

		 case KEY_ST_LONG:														// If state is on, key still pressed

		 if (!AppKey_IsKeyPressed(nChannel))									// If key actually is pressed
 782:	0e 94 46 03 	call	0x68c	; 0x68c <AppKey_IsKeyPressed>
 786:	81 11       	cpse	r24, r1
 788:	0a c0       	rjmp	.+20     	; 0x79e <AppKey_ProcessChannel+0xee>
		 {
			 SET_APP_KEY_STATE (pThis, KEY_ST_OFF);							// Set new state
			 SET_APP_KEY_EVENT (pThis, KEY_EV_RELEASE);						// Release-Event-NEW
 78a:	ce 01       	movw	r24, r28
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	c8 0f       	add	r28, r24
 792:	d9 1f       	adc	r29, r25
 794:	cd 5d       	subi	r28, 0xDD	; 221
 796:	de 4f       	sbci	r29, 0xFE	; 254
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	8a 83       	std	Y+2, r24	; 0x02
 79c:	12 c0       	rjmp	.+36     	; 0x7c2 <AppKey_ProcessChannel+0x112>
		 }
		 else
		 {
			SET_APP_KEY_STATE(pThis, KEY_ST_LONG);						// Set new state
			SET_APP_KEY_EVENT(pThis, KEY_EV_LONG);						// Set new state
 79e:	ce 01       	movw	r24, r28
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	c8 0f       	add	r28, r24
 7a6:	d9 1f       	adc	r29, r25
 7a8:	cd 5d       	subi	r28, 0xDD	; 221
 7aa:	de 4f       	sbci	r29, 0xFE	; 254
 7ac:	82 e4       	ldi	r24, 0x42	; 66
 7ae:	8a 83       	std	Y+2, r24	; 0x02
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <AppKey_ProcessChannel+0x112>
		 }

		 break;

		 default:
		 pThis->nState = KEY_ST_OFF;											// Set to state OFF
 7b2:	ce 01       	movw	r24, r28
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	c8 0f       	add	r28, r24
 7ba:	d9 1f       	adc	r29, r25
 7bc:	cd 5d       	subi	r28, 0xDD	; 221
 7be:	de 4f       	sbci	r29, 0xFE	; 254
 7c0:	1a 82       	std	Y+2, r1	; 0x02
		 break;
	 }

 }
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <AppKey_Process>:
 {
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 AppKey_ProcessChannel(nIndex);											// Call state machine
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	0e 94 58 03 	call	0x6b0	; 0x6b0 <AppKey_ProcessChannel>
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <AppKey_ProcessChannel>
 7d4:	08 95       	ret

000007d6 <initDisplay>:
 uint8_t flag = 7;


 void initDisplay()
 {
	SET_L1;
 7d6:	58 9a       	sbi	0x0b, 0	; 11
	SET_L2;
 7d8:	59 9a       	sbi	0x0b, 1	; 11
	SET_L3;
 7da:	5a 9a       	sbi	0x0b, 2	; 11
	SET_L4;
 7dc:	5b 9a       	sbi	0x0b, 3	; 11
	SET_L5;
 7de:	5c 9a       	sbi	0x0b, 4	; 11
	SET_L6;
 7e0:	2b 9a       	sbi	0x05, 3	; 5
	SET_L7;
 7e2:	2c 9a       	sbi	0x05, 4	; 5
	
	SET_D1;
 7e4:	40 9a       	sbi	0x08, 0	; 8
	SET_D2;
 7e6:	41 9a       	sbi	0x08, 1	; 8
	SET_D3;
 7e8:	42 9a       	sbi	0x08, 2	; 8
	SET_D4;
 7ea:	43 9a       	sbi	0x08, 3	; 8

	CLR_D5;
 7ec:	44 98       	cbi	0x08, 4	; 8
	CLR_D6;
 7ee:	45 98       	cbi	0x08, 5	; 8

	CLR_PWM;
 7f0:	5f 98       	cbi	0x0b, 7	; 11
	CLR_PWM2;
 7f2:	2a 98       	cbi	0x05, 2	; 5
 7f4:	08 95       	ret

000007f6 <setSymbol>:
 }

 void setSymbol(uint8_t num)
 {
	if (symbols[num] & BIT0) CLR_L1;
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	fc 01       	movw	r30, r24
 7fa:	e9 5f       	subi	r30, 0xF9	; 249
 7fc:	fe 4f       	sbci	r31, 0xFE	; 254
 7fe:	20 81       	ld	r18, Z
 800:	20 ff       	sbrs	r18, 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <setSymbol+0x12>
 804:	58 98       	cbi	0x0b, 0	; 11
 806:	01 c0       	rjmp	.+2      	; 0x80a <setSymbol+0x14>
	else SET_L1;
 808:	58 9a       	sbi	0x0b, 0	; 11

	if (symbols[num] & BIT1) CLR_L2;
 80a:	fc 01       	movw	r30, r24
 80c:	e9 5f       	subi	r30, 0xF9	; 249
 80e:	fe 4f       	sbci	r31, 0xFE	; 254
 810:	20 81       	ld	r18, Z
 812:	21 ff       	sbrs	r18, 1
 814:	02 c0       	rjmp	.+4      	; 0x81a <setSymbol+0x24>
 816:	59 98       	cbi	0x0b, 1	; 11
 818:	01 c0       	rjmp	.+2      	; 0x81c <setSymbol+0x26>
	else SET_L2;
 81a:	59 9a       	sbi	0x0b, 1	; 11

	if (symbols[num] & BIT2) CLR_L3;
 81c:	fc 01       	movw	r30, r24
 81e:	e9 5f       	subi	r30, 0xF9	; 249
 820:	fe 4f       	sbci	r31, 0xFE	; 254
 822:	20 81       	ld	r18, Z
 824:	22 ff       	sbrs	r18, 2
 826:	02 c0       	rjmp	.+4      	; 0x82c <setSymbol+0x36>
 828:	5a 98       	cbi	0x0b, 2	; 11
 82a:	01 c0       	rjmp	.+2      	; 0x82e <setSymbol+0x38>
	else SET_L3;
 82c:	5a 9a       	sbi	0x0b, 2	; 11

	if (symbols[num] & BIT3) CLR_L4;
 82e:	fc 01       	movw	r30, r24
 830:	e9 5f       	subi	r30, 0xF9	; 249
 832:	fe 4f       	sbci	r31, 0xFE	; 254
 834:	20 81       	ld	r18, Z
 836:	23 ff       	sbrs	r18, 3
 838:	02 c0       	rjmp	.+4      	; 0x83e <setSymbol+0x48>
 83a:	5b 98       	cbi	0x0b, 3	; 11
 83c:	01 c0       	rjmp	.+2      	; 0x840 <setSymbol+0x4a>
	else SET_L4;
 83e:	5b 9a       	sbi	0x0b, 3	; 11

	if (symbols[num] & BIT4) CLR_L5;
 840:	fc 01       	movw	r30, r24
 842:	e9 5f       	subi	r30, 0xF9	; 249
 844:	fe 4f       	sbci	r31, 0xFE	; 254
 846:	20 81       	ld	r18, Z
 848:	24 ff       	sbrs	r18, 4
 84a:	02 c0       	rjmp	.+4      	; 0x850 <setSymbol+0x5a>
 84c:	5c 98       	cbi	0x0b, 4	; 11
 84e:	01 c0       	rjmp	.+2      	; 0x852 <setSymbol+0x5c>
	else SET_L5;
 850:	5c 9a       	sbi	0x0b, 4	; 11

	if (symbols[num] & BIT5) CLR_L6;
 852:	fc 01       	movw	r30, r24
 854:	e9 5f       	subi	r30, 0xF9	; 249
 856:	fe 4f       	sbci	r31, 0xFE	; 254
 858:	20 81       	ld	r18, Z
 85a:	25 ff       	sbrs	r18, 5
 85c:	02 c0       	rjmp	.+4      	; 0x862 <setSymbol+0x6c>
 85e:	2b 98       	cbi	0x05, 3	; 5
 860:	01 c0       	rjmp	.+2      	; 0x864 <setSymbol+0x6e>
	else SET_L6;
 862:	2b 9a       	sbi	0x05, 3	; 5

	if (symbols[num] & BIT6) CLR_L7;
 864:	fc 01       	movw	r30, r24
 866:	e9 5f       	subi	r30, 0xF9	; 249
 868:	fe 4f       	sbci	r31, 0xFE	; 254
 86a:	80 81       	ld	r24, Z
 86c:	86 ff       	sbrs	r24, 6
 86e:	02 c0       	rjmp	.+4      	; 0x874 <setSymbol+0x7e>
 870:	2c 98       	cbi	0x05, 4	; 5
 872:	08 95       	ret
	else SET_L7;
 874:	2c 9a       	sbi	0x05, 4	; 5
 876:	08 95       	ret

00000878 <dots>:
 }

 void dots()
 {
	if (flag & BIT2)
 878:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 87c:	82 fd       	sbrc	r24, 2
	{
		SET_D5;
 87e:	44 9a       	sbi	0x08, 4	; 8
 880:	08 95       	ret

00000882 <getFlag>:
	}
 }

 void getFlag(uint8_t fl)
 {
	flag = fl;
 882:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag>
 886:	08 95       	ret

00000888 <displayProcess>:

void displayProcess()
{
	
	
	setSymbol(regValue[0]);
 888:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <regValue>
 88c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <setSymbol>
	if (flag & BIT0)
 890:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 894:	80 fd       	sbrc	r24, 0
	{
		CLR_D1;
 896:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 898:	8b e4       	ldi	r24, 0x4B	; 75
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	01 97       	sbiw	r24, 0x01	; 1
 89e:	f1 f7       	brne	.-4      	; 0x89c <displayProcess+0x14>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <displayProcess+0x1a>
 8a2:	00 00       	nop
	}
	_delay_us(90);

	SET_D1;
 8a4:	40 9a       	sbi	0x08, 0	; 8
	setSymbol(regValue[1]);
 8a6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <regValue+0x1>
 8aa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <setSymbol>
	if (flag & BIT0)
 8ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 8b2:	80 fd       	sbrc	r24, 0
	{
		CLR_D2;
 8b4:	41 98       	cbi	0x08, 1	; 8
 8b6:	8b e4       	ldi	r24, 0x4B	; 75
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <displayProcess+0x32>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <displayProcess+0x38>
 8c0:	00 00       	nop
	}
	_delay_us(90);

	SET_D2;
 8c2:	41 9a       	sbi	0x08, 1	; 8
	setSymbol(regValue[2]);
 8c4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <regValue+0x2>
 8c8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <setSymbol>
	if (flag & BIT1)
 8cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 8d0:	81 fd       	sbrc	r24, 1
	{
		CLR_D3;
 8d2:	42 98       	cbi	0x08, 2	; 8
 8d4:	8b e4       	ldi	r24, 0x4B	; 75
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <displayProcess+0x50>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <displayProcess+0x56>
 8de:	00 00       	nop
	}
	_delay_us(90);

	SET_D3;
 8e0:	42 9a       	sbi	0x08, 2	; 8
	setSymbol(regValue[3]);
 8e2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <regValue+0x3>
 8e6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <setSymbol>
	if (flag & BIT1)
 8ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 8ee:	81 fd       	sbrc	r24, 1
	{
		CLR_D4;
 8f0:	43 98       	cbi	0x08, 3	; 8
 8f2:	8b e4       	ldi	r24, 0x4B	; 75
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <displayProcess+0x6e>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <displayProcess+0x74>
 8fc:	00 00       	nop
	}
	_delay_us(90);
	
	SET_D4;
 8fe:	43 9a       	sbi	0x08, 3	; 8
 900:	85 ef       	ldi	r24, 0xF5	; 245
 902:	9c e0       	ldi	r25, 0x0C	; 12
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
 908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xb>
 90a:	00 00       	nop
 90c:	08 95       	ret

0000090e <displayTime>:
	_delay_us(900);
}


void displayTime(uint16_t lTime)
{
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	ec 01       	movw	r28, r24
	regValue[0] = lTime % 10;
 914:	e9 e2       	ldi	r30, 0x29	; 41
 916:	f1 e0       	ldi	r31, 0x01	; 1
 918:	9c 01       	movw	r18, r24
 91a:	ad ec       	ldi	r26, 0xCD	; 205
 91c:	bc ec       	ldi	r27, 0xCC	; 204
 91e:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 922:	ac 01       	movw	r20, r24
 924:	56 95       	lsr	r21
 926:	47 95       	ror	r20
 928:	56 95       	lsr	r21
 92a:	47 95       	ror	r20
 92c:	56 95       	lsr	r21
 92e:	47 95       	ror	r20
 930:	ca 01       	movw	r24, r20
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	44 0f       	add	r20, r20
 938:	55 1f       	adc	r21, r21
 93a:	44 0f       	add	r20, r20
 93c:	55 1f       	adc	r21, r21
 93e:	44 0f       	add	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	48 0f       	add	r20, r24
 944:	59 1f       	adc	r21, r25
 946:	ce 01       	movw	r24, r28
 948:	84 1b       	sub	r24, r20
 94a:	95 0b       	sbc	r25, r21
 94c:	80 83       	st	Z, r24
	lTime /= 10;
 94e:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 952:	ec 01       	movw	r28, r24
 954:	d6 95       	lsr	r29
 956:	c7 95       	ror	r28
 958:	d6 95       	lsr	r29
 95a:	c7 95       	ror	r28
 95c:	d6 95       	lsr	r29
 95e:	c7 95       	ror	r28
	regValue[1] = lTime % 10;
 960:	9e 01       	movw	r18, r28
 962:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 966:	ac 01       	movw	r20, r24
 968:	56 95       	lsr	r21
 96a:	47 95       	ror	r20
 96c:	56 95       	lsr	r21
 96e:	47 95       	ror	r20
 970:	56 95       	lsr	r21
 972:	47 95       	ror	r20
 974:	ca 01       	movw	r24, r20
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	44 0f       	add	r20, r20
 97c:	55 1f       	adc	r21, r21
 97e:	44 0f       	add	r20, r20
 980:	55 1f       	adc	r21, r21
 982:	44 0f       	add	r20, r20
 984:	55 1f       	adc	r21, r21
 986:	48 0f       	add	r20, r24
 988:	59 1f       	adc	r21, r25
 98a:	ce 01       	movw	r24, r28
 98c:	84 1b       	sub	r24, r20
 98e:	95 0b       	sbc	r25, r21
 990:	81 83       	std	Z+1, r24	; 0x01
	lTime /= 10;
 992:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 996:	ec 01       	movw	r28, r24
 998:	d6 95       	lsr	r29
 99a:	c7 95       	ror	r28
 99c:	d6 95       	lsr	r29
 99e:	c7 95       	ror	r28
 9a0:	d6 95       	lsr	r29
 9a2:	c7 95       	ror	r28
	regValue[2] = lTime % 10;
 9a4:	9e 01       	movw	r18, r28
 9a6:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 9aa:	ac 01       	movw	r20, r24
 9ac:	56 95       	lsr	r21
 9ae:	47 95       	ror	r20
 9b0:	56 95       	lsr	r21
 9b2:	47 95       	ror	r20
 9b4:	56 95       	lsr	r21
 9b6:	47 95       	ror	r20
 9b8:	ca 01       	movw	r24, r20
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	44 0f       	add	r20, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	44 0f       	add	r20, r20
 9c8:	55 1f       	adc	r21, r21
 9ca:	48 0f       	add	r20, r24
 9cc:	59 1f       	adc	r21, r25
 9ce:	ce 01       	movw	r24, r28
 9d0:	84 1b       	sub	r24, r20
 9d2:	95 0b       	sbc	r25, r21
 9d4:	82 83       	std	Z+2, r24	; 0x02
	regValue[3] = lTime / 10;
 9d6:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	96 95       	lsr	r25
 9e0:	87 95       	ror	r24
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	83 83       	std	Z+3, r24	; 0x03
}
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	08 95       	ret

000009ee <displayMenu>:

void displayMenu(uint8_t sym, uint8_t pos)
{
	regValue[pos] = sym;
 9ee:	e6 2f       	mov	r30, r22
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	e7 5d       	subi	r30, 0xD7	; 215
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	80 83       	st	Z, r24
 9f8:	08 95       	ret

000009fa <main>:
#include "display.h"


int main(void)
{
	initialization();
 9fa:	0e 94 53 00 	call	0xa6	; 0xa6 <initialization>

    while (1) 
    {
		mainApp();
 9fe:	0e 94 81 01 	call	0x302	; 0x302 <mainApp>
    }
 a02:	fd cf       	rjmp	.-6      	; 0x9fe <main+0x4>

00000a04 <initTimer>:
  static volatile uint16_t globalTime;
  uint16_t localTime = 0;
 
  void initTimer()
  {
	  DISABLE_TIMER_INT;														// Disable KNX timer interrupt
 a04:	ef e6       	ldi	r30, 0x6F	; 111
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	8d 7f       	andi	r24, 0xFD	; 253
 a0c:	80 83       	st	Z, r24

	  globalTime		= 0;													// Reset system time
 a0e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <globalTime+0x1>
 a12:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <globalTime>

	  OCR1A  += TICKS_PER_MSECOND;												// Set first clock period
 a16:	a8 e8       	ldi	r26, 0x88	; 136
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	8d 91       	ld	r24, X+
 a1c:	9c 91       	ld	r25, X
 a1e:	11 97       	sbiw	r26, 0x01	; 1
 a20:	87 56       	subi	r24, 0x67	; 103
 a22:	96 4c       	sbci	r25, 0xC6	; 198
 a24:	11 96       	adiw	r26, 0x01	; 1
 a26:	9c 93       	st	X, r25
 a28:	8e 93       	st	-X, r24

	  TCCR1A	= 0;																// Set TimerMode to Normal
 a2a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	  TCCR1B |= (1 << CS10);														// Select source clock: ClckIo, no pre-scaler; set TimerMode
 a2e:	a1 e8       	ldi	r26, 0x81	; 129
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	8c 91       	ld	r24, X
 a34:	81 60       	ori	r24, 0x01	; 1
 a36:	8c 93       	st	X, r24

	  ENABLE_INTERRUPTS;
 a38:	78 94       	sei
	  ENABLE_TIMER_INT;														// Enable send timer interrupt (1 ms)
 a3a:	80 81       	ld	r24, Z
 a3c:	82 60       	ori	r24, 0x02	; 2
 a3e:	80 83       	st	Z, r24
 a40:	08 95       	ret

00000a42 <timerProcess>:
  }


void timerProcess()
{
	if (localTime % 199 == 0)
 a42:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <localTime>
 a46:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <localTime+0x1>
 a4a:	9a 01       	movw	r18, r20
 a4c:	a5 e5       	ldi	r26, 0x55	; 85
 a4e:	b2 e5       	ldi	r27, 0x52	; 82
 a50:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 a54:	00 24       	eor	r0, r0
 a56:	88 0f       	add	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	00 1c       	adc	r0, r0
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	00 1c       	adc	r0, r0
 a62:	89 2f       	mov	r24, r25
 a64:	90 2d       	mov	r25, r0
 a66:	67 ec       	ldi	r22, 0xC7	; 199
 a68:	68 9f       	mul	r22, r24
 a6a:	90 01       	movw	r18, r0
 a6c:	69 9f       	mul	r22, r25
 a6e:	30 0d       	add	r19, r0
 a70:	11 24       	eor	r1, r1
 a72:	42 17       	cp	r20, r18
 a74:	53 07       	cpc	r21, r19
 a76:	79 f4       	brne	.+30     	; 0xa96 <timerProcess+0x54>
	{
		srand((unsigned int)globalTime);
 a78:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <globalTime>
 a7c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <globalTime+0x1>
 a80:	0e 94 cb 06 	call	0xd96	; 0xd96 <srand>
		setBeepFreq(27 + rand() % 150);
 a84:	0e 94 c6 06 	call	0xd8c	; 0xd8c <rand>
 a88:	66 e9       	ldi	r22, 0x96	; 150
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	0e 94 43 06 	call	0xc86	; 0xc86 <__divmodhi4>
 a90:	85 5e       	subi	r24, 0xE5	; 229
 a92:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <setBeepFreq>
	}
	if (localTime > 499)
 a96:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <localTime>
 a9a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <localTime+0x1>
 a9e:	84 3f       	cpi	r24, 0xF4	; 244
 aa0:	91 40       	sbci	r25, 0x01	; 1
 aa2:	08 f0       	brcs	.+2      	; 0xaa6 <timerProcess+0x64>
	{
		CLR_D5;
 aa4:	44 98       	cbi	0x08, 4	; 8
	}
	if (localTime > 999)
 aa6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <localTime>
 aaa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <localTime+0x1>
 aae:	88 3e       	cpi	r24, 0xE8	; 232
 ab0:	93 40       	sbci	r25, 0x03	; 3
 ab2:	58 f0       	brcs	.+22     	; 0xaca <timerProcess+0x88>
	{
		dots();
 ab4:	0e 94 3c 04 	call	0x878	; 0x878 <dots>
		localTime = 0;
 ab8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <localTime+0x1>
 abc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <localTime>
		sec++;
 ac0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec>
 ac4:	8f 5f       	subi	r24, 0xFF	; 255
 ac6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sec>
	}

	if (sec > 59)
 aca:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec>
 ace:	8c 33       	cpi	r24, 0x3C	; 60
 ad0:	38 f0       	brcs	.+14     	; 0xae0 <timerProcess+0x9e>
	{
		sec = 0;
 ad2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <sec>
		min++;
 ad6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <min>
 ada:	8f 5f       	subi	r24, 0xFF	; 255
 adc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <min>
	}
	if (min > 59)
 ae0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <min>
 ae4:	8c 33       	cpi	r24, 0x3C	; 60
 ae6:	38 f0       	brcs	.+14     	; 0xaf6 <timerProcess+0xb4>
	{
		min = 0;
 ae8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <min>
		hour++;
 aec:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <hour>
 af0:	8f 5f       	subi	r24, 0xFF	; 255
 af2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <hour>
	}
	if (hour > 23)
 af6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <hour>
 afa:	88 31       	cpi	r24, 0x18	; 24
 afc:	28 f0       	brcs	.+10     	; 0xb08 <timerProcess+0xc6>
	{
		hour = 0;
 afe:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <hour>
		dayFlag = 1;
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <dayFlag>
	}

	if (alarmFlag == 1)
 b08:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <alarmFlag>
 b0c:	81 30       	cpi	r24, 0x01	; 1
 b0e:	a1 f4       	brne	.+40     	; 0xb38 <timerProcess+0xf6>
	{
		if (hour >= alarmHour && min >= alarmMin && dayFlag == 1)
 b10:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <hour>
 b14:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <alarmHour>
 b18:	98 17       	cp	r25, r24
 b1a:	70 f0       	brcs	.+28     	; 0xb38 <timerProcess+0xf6>
 b1c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <min>
 b20:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <alarmMin>
 b24:	98 17       	cp	r25, r24
 b26:	40 f0       	brcs	.+16     	; 0xb38 <timerProcess+0xf6>
 b28:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <dayFlag>
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	21 f4       	brne	.+8      	; 0xb38 <timerProcess+0xf6>
		{
			startBeep();
 b30:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <startBeep>
			alarmFlag = 0;
 b34:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <alarmFlag>
 b38:	08 95       	ret

00000b3a <stopAlarm>:
}

void stopAlarm()
{
	
	stopBeep();
 b3a:	0e 94 ef 02 	call	0x5de	; 0x5de <stopBeep>
	CLR_D6;
 b3e:	45 98       	cbi	0x08, 5	; 8
 b40:	08 95       	ret

00000b42 <startAlarm>:

}

void startAlarm()
{
	alarmFlag = 1;
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <alarmFlag>
	if (hour >= alarmHour)
 b48:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <hour>
 b4c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <alarmHour>
 b50:	98 17       	cp	r25, r24
 b52:	40 f0       	brcs	.+16     	; 0xb64 <startAlarm+0x22>
	{	
		if (min >= alarmMin)
 b54:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <min>
 b58:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <alarmMin>
 b5c:	98 17       	cp	r25, r24
 b5e:	10 f0       	brcs	.+4      	; 0xb64 <startAlarm+0x22>
		{
			dayFlag = 0;
 b60:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <dayFlag>
		}
	}
	SET_D6;
 b64:	45 9a       	sbi	0x08, 5	; 8
 b66:	08 95       	ret

00000b68 <setTime>:
	
}

void setTime(uint8_t lTime, uint8_t hl)
{
	sec = 0;
 b68:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <sec>
	if (hl == 0)
 b6c:	61 11       	cpse	r22, r1
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <setTime+0xe>
	{
		min = lTime;
 b70:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <min>
 b74:	08 95       	ret
	}
	else
	{
		hour = lTime;
 b76:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <hour>
 b7a:	08 95       	ret

00000b7c <setAlarmTime>:
	}
}

void setAlarmTime(uint8_t lTime, uint8_t hl)
{
	if (hl == 0)
 b7c:	61 11       	cpse	r22, r1
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <setAlarmTime+0xa>
	{
		alarmMin = lTime;
 b80:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <alarmMin>
 b84:	08 95       	ret
	}
	else
	{
		alarmHour = lTime;
 b86:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <alarmHour>
 b8a:	08 95       	ret

00000b8c <getTime>:
	}
}

uint16_t getTime()
{
	return (hour * 100) + min;
 b8c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <hour>
 b90:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <min>
 b94:	90 e0       	ldi	r25, 0x00	; 0
}
 b96:	34 e6       	ldi	r19, 0x64	; 100
 b98:	23 9f       	mul	r18, r19
 b9a:	80 0d       	add	r24, r0
 b9c:	91 1d       	adc	r25, r1
 b9e:	11 24       	eor	r1, r1
 ba0:	08 95       	ret

00000ba2 <getAlarmTime>:

uint16_t getAlarmTime()
{
	return (alarmHour * 100) + alarmMin;
 ba2:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <alarmHour>
 ba6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <alarmMin>
 baa:	90 e0       	ldi	r25, 0x00	; 0
}
 bac:	34 e6       	ldi	r19, 0x64	; 100
 bae:	23 9f       	mul	r18, r19
 bb0:	80 0d       	add	r24, r0
 bb2:	91 1d       	adc	r25, r1
 bb4:	11 24       	eor	r1, r1
 bb6:	08 95       	ret

00000bb8 <getTimeMs>:

  uint16_t getTimeMs()
  {
	  uint16_t nTime;																// Variable for time

	  DISABLE_TIMER_INT;														// Prevent from timer interrupt processing
 bb8:	ef e6       	ldi	r30, 0x6F	; 111
 bba:	f0 e0       	ldi	r31, 0x00	; 0
 bbc:	80 81       	ld	r24, Z
 bbe:	8d 7f       	andi	r24, 0xFD	; 253
 bc0:	80 83       	st	Z, r24
	  nTime = (uint16_t)globalTime;											// Get actual time
 bc2:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <globalTime>
 bc6:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <globalTime+0x1>
	  ENABLE_TIMER_INT;														// Re-enable timer interrupt
 bca:	90 81       	ld	r25, Z
 bcc:	92 60       	ori	r25, 0x02	; 2
 bce:	90 83       	st	Z, r25

	  return nTime;																// Return current time
  }
 bd0:	c9 01       	movw	r24, r18
 bd2:	08 95       	ret

00000bd4 <getDelayMs>:

  uint16_t getDelayMs(uint16_t nOldTime)
  {
	  uint16_t nDelay;															// Variable for delay

	  DISABLE_TIMER_INT;														// Prevent from timer interrupt processing
 bd4:	ef e6       	ldi	r30, 0x6F	; 111
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	20 81       	ld	r18, Z
 bda:	2d 7f       	andi	r18, 0xFD	; 253
 bdc:	20 83       	st	Z, r18
	  nDelay = (uint16_t)globalTime - nOldTime;								// Calculate delay
 bde:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <globalTime>
 be2:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <globalTime+0x1>
	  ENABLE_TIMER_INT;														// Re-enable timer interrupt
 be6:	20 81       	ld	r18, Z
 be8:	22 60       	ori	r18, 0x02	; 2
 bea:	20 83       	st	Z, r18

	  return nDelay;																// Return delay
  }
 bec:	9a 01       	movw	r18, r20
 bee:	28 1b       	sub	r18, r24
 bf0:	39 0b       	sbc	r19, r25
 bf2:	c9 01       	movw	r24, r18
 bf4:	08 95       	ret

00000bf6 <__vector_11>:


  ISR(TIMER1_COMPA_vect)
  {
 bf6:	1f 92       	push	r1
 bf8:	0f 92       	push	r0
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	0f 92       	push	r0
 bfe:	11 24       	eor	r1, r1
 c00:	2f 93       	push	r18
 c02:	3f 93       	push	r19
 c04:	8f 93       	push	r24
 c06:	9f 93       	push	r25
 c08:	ef 93       	push	r30
 c0a:	ff 93       	push	r31
	  uint16_t nTemp;																// Temporary storage

	  nTemp  = TCNT1;																// Get current time
 c0c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 c10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	  nTemp -= OCR1A;																// Subtract interrupt time
 c14:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 c18:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c1c:	82 1b       	sub	r24, r18
 c1e:	93 0b       	sbc	r25, r19

	  if (nTemp < (TICKS_PER_MSECOND/2))											// If more than half period left
 c20:	8c 3c       	cpi	r24, 0xCC	; 204
 c22:	9c 41       	sbci	r25, 0x1C	; 28
 c24:	48 f4       	brcc	.+18     	; 0xc38 <__vector_11+0x42>
	  {
		  OCR1A += (TICKS_PER_MSECOND);											// Add Offset to OCR1A relative
 c26:	e8 e8       	ldi	r30, 0x88	; 136
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	91 81       	ldd	r25, Z+1	; 0x01
 c2e:	87 56       	subi	r24, 0x67	; 103
 c30:	96 4c       	sbci	r25, 0xC6	; 198
 c32:	91 83       	std	Z+1, r25	; 0x01
 c34:	80 83       	st	Z, r24
 c36:	0a c0       	rjmp	.+20     	; 0xc4c <__vector_11+0x56>
	  }
	  else
	  {
		  OCR1A = TCNT1 + (TICKS_PER_MSECOND);									// Set OCR1A to 1 ms absolute
 c38:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 c3c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 c40:	87 56       	subi	r24, 0x67	; 103
 c42:	96 4c       	sbci	r25, 0xC6	; 198
 c44:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c48:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	  }

	  globalTime++;															// Increment counter
 c4c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <globalTime>
 c50:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <globalTime+0x1>
 c54:	01 96       	adiw	r24, 0x01	; 1
 c56:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <globalTime+0x1>
 c5a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <globalTime>
	  localTime++;
 c5e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <localTime>
 c62:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <localTime+0x1>
 c66:	01 96       	adiw	r24, 0x01	; 1
 c68:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <localTime+0x1>
 c6c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <localTime>
 c70:	ff 91       	pop	r31
 c72:	ef 91       	pop	r30
 c74:	9f 91       	pop	r25
 c76:	8f 91       	pop	r24
 c78:	3f 91       	pop	r19
 c7a:	2f 91       	pop	r18
 c7c:	0f 90       	pop	r0
 c7e:	0f be       	out	0x3f, r0	; 63
 c80:	0f 90       	pop	r0
 c82:	1f 90       	pop	r1
 c84:	18 95       	reti

00000c86 <__divmodhi4>:
 c86:	97 fb       	bst	r25, 7
 c88:	07 2e       	mov	r0, r23
 c8a:	16 f4       	brtc	.+4      	; 0xc90 <__divmodhi4+0xa>
 c8c:	00 94       	com	r0
 c8e:	07 d0       	rcall	.+14     	; 0xc9e <__divmodhi4_neg1>
 c90:	77 fd       	sbrc	r23, 7
 c92:	09 d0       	rcall	.+18     	; 0xca6 <__divmodhi4_neg2>
 c94:	0e 94 66 06 	call	0xccc	; 0xccc <__udivmodhi4>
 c98:	07 fc       	sbrc	r0, 7
 c9a:	05 d0       	rcall	.+10     	; 0xca6 <__divmodhi4_neg2>
 c9c:	3e f4       	brtc	.+14     	; 0xcac <__divmodhi4_exit>

00000c9e <__divmodhi4_neg1>:
 c9e:	90 95       	com	r25
 ca0:	81 95       	neg	r24
 ca2:	9f 4f       	sbci	r25, 0xFF	; 255
 ca4:	08 95       	ret

00000ca6 <__divmodhi4_neg2>:
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255

00000cac <__divmodhi4_exit>:
 cac:	08 95       	ret

00000cae <__umulhisi3>:
 cae:	a2 9f       	mul	r26, r18
 cb0:	b0 01       	movw	r22, r0
 cb2:	b3 9f       	mul	r27, r19
 cb4:	c0 01       	movw	r24, r0
 cb6:	a3 9f       	mul	r26, r19
 cb8:	70 0d       	add	r23, r0
 cba:	81 1d       	adc	r24, r1
 cbc:	11 24       	eor	r1, r1
 cbe:	91 1d       	adc	r25, r1
 cc0:	b2 9f       	mul	r27, r18
 cc2:	70 0d       	add	r23, r0
 cc4:	81 1d       	adc	r24, r1
 cc6:	11 24       	eor	r1, r1
 cc8:	91 1d       	adc	r25, r1
 cca:	08 95       	ret

00000ccc <__udivmodhi4>:
 ccc:	aa 1b       	sub	r26, r26
 cce:	bb 1b       	sub	r27, r27
 cd0:	51 e1       	ldi	r21, 0x11	; 17
 cd2:	07 c0       	rjmp	.+14     	; 0xce2 <__udivmodhi4_ep>

00000cd4 <__udivmodhi4_loop>:
 cd4:	aa 1f       	adc	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	a6 17       	cp	r26, r22
 cda:	b7 07       	cpc	r27, r23
 cdc:	10 f0       	brcs	.+4      	; 0xce2 <__udivmodhi4_ep>
 cde:	a6 1b       	sub	r26, r22
 ce0:	b7 0b       	sbc	r27, r23

00000ce2 <__udivmodhi4_ep>:
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	5a 95       	dec	r21
 ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__udivmodhi4_loop>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	bc 01       	movw	r22, r24
 cf0:	cd 01       	movw	r24, r26
 cf2:	08 95       	ret

00000cf4 <do_rand>:
 cf4:	8f 92       	push	r8
 cf6:	9f 92       	push	r9
 cf8:	af 92       	push	r10
 cfa:	bf 92       	push	r11
 cfc:	cf 92       	push	r12
 cfe:	df 92       	push	r13
 d00:	ef 92       	push	r14
 d02:	ff 92       	push	r15
 d04:	cf 93       	push	r28
 d06:	df 93       	push	r29
 d08:	ec 01       	movw	r28, r24
 d0a:	68 81       	ld	r22, Y
 d0c:	79 81       	ldd	r23, Y+1	; 0x01
 d0e:	8a 81       	ldd	r24, Y+2	; 0x02
 d10:	9b 81       	ldd	r25, Y+3	; 0x03
 d12:	61 15       	cp	r22, r1
 d14:	71 05       	cpc	r23, r1
 d16:	81 05       	cpc	r24, r1
 d18:	91 05       	cpc	r25, r1
 d1a:	21 f4       	brne	.+8      	; 0xd24 <do_rand+0x30>
 d1c:	64 e2       	ldi	r22, 0x24	; 36
 d1e:	79 ed       	ldi	r23, 0xD9	; 217
 d20:	8b e5       	ldi	r24, 0x5B	; 91
 d22:	97 e0       	ldi	r25, 0x07	; 7
 d24:	2d e1       	ldi	r18, 0x1D	; 29
 d26:	33 ef       	ldi	r19, 0xF3	; 243
 d28:	41 e0       	ldi	r20, 0x01	; 1
 d2a:	50 e0       	ldi	r21, 0x00	; 0
 d2c:	0e 94 d6 06 	call	0xdac	; 0xdac <__divmodsi4>
 d30:	49 01       	movw	r8, r18
 d32:	5a 01       	movw	r10, r20
 d34:	9b 01       	movw	r18, r22
 d36:	ac 01       	movw	r20, r24
 d38:	a7 ea       	ldi	r26, 0xA7	; 167
 d3a:	b1 e4       	ldi	r27, 0x41	; 65
 d3c:	0e 94 f5 06 	call	0xdea	; 0xdea <__muluhisi3>
 d40:	6b 01       	movw	r12, r22
 d42:	7c 01       	movw	r14, r24
 d44:	ac ee       	ldi	r26, 0xEC	; 236
 d46:	b4 ef       	ldi	r27, 0xF4	; 244
 d48:	a5 01       	movw	r20, r10
 d4a:	94 01       	movw	r18, r8
 d4c:	0e 94 03 07 	call	0xe06	; 0xe06 <__mulohisi3>
 d50:	dc 01       	movw	r26, r24
 d52:	cb 01       	movw	r24, r22
 d54:	8c 0d       	add	r24, r12
 d56:	9d 1d       	adc	r25, r13
 d58:	ae 1d       	adc	r26, r14
 d5a:	bf 1d       	adc	r27, r15
 d5c:	b7 ff       	sbrs	r27, 7
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <do_rand+0x72>
 d60:	01 97       	sbiw	r24, 0x01	; 1
 d62:	a1 09       	sbc	r26, r1
 d64:	b0 48       	sbci	r27, 0x80	; 128
 d66:	88 83       	st	Y, r24
 d68:	99 83       	std	Y+1, r25	; 0x01
 d6a:	aa 83       	std	Y+2, r26	; 0x02
 d6c:	bb 83       	std	Y+3, r27	; 0x03
 d6e:	9f 77       	andi	r25, 0x7F	; 127
 d70:	df 91       	pop	r29
 d72:	cf 91       	pop	r28
 d74:	ff 90       	pop	r15
 d76:	ef 90       	pop	r14
 d78:	df 90       	pop	r13
 d7a:	cf 90       	pop	r12
 d7c:	bf 90       	pop	r11
 d7e:	af 90       	pop	r10
 d80:	9f 90       	pop	r9
 d82:	8f 90       	pop	r8
 d84:	08 95       	ret

00000d86 <rand_r>:
 d86:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <do_rand>
 d8a:	08 95       	ret

00000d8c <rand>:
 d8c:	80 e0       	ldi	r24, 0x00	; 0
 d8e:	91 e0       	ldi	r25, 0x01	; 1
 d90:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <do_rand>
 d94:	08 95       	ret

00000d96 <srand>:
 d96:	a0 e0       	ldi	r26, 0x00	; 0
 d98:	b0 e0       	ldi	r27, 0x00	; 0
 d9a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 d9e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 da2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 da6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 daa:	08 95       	ret

00000dac <__divmodsi4>:
 dac:	05 2e       	mov	r0, r21
 dae:	97 fb       	bst	r25, 7
 db0:	1e f4       	brtc	.+6      	; 0xdb8 <__divmodsi4+0xc>
 db2:	00 94       	com	r0
 db4:	0e 94 ed 06 	call	0xdda	; 0xdda <__negsi2>
 db8:	57 fd       	sbrc	r21, 7
 dba:	07 d0       	rcall	.+14     	; 0xdca <__divmodsi4_neg2>
 dbc:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodsi4>
 dc0:	07 fc       	sbrc	r0, 7
 dc2:	03 d0       	rcall	.+6      	; 0xdca <__divmodsi4_neg2>
 dc4:	4e f4       	brtc	.+18     	; 0xdd8 <__divmodsi4_exit>
 dc6:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__negsi2>

00000dca <__divmodsi4_neg2>:
 dca:	50 95       	com	r21
 dcc:	40 95       	com	r20
 dce:	30 95       	com	r19
 dd0:	21 95       	neg	r18
 dd2:	3f 4f       	sbci	r19, 0xFF	; 255
 dd4:	4f 4f       	sbci	r20, 0xFF	; 255
 dd6:	5f 4f       	sbci	r21, 0xFF	; 255

00000dd8 <__divmodsi4_exit>:
 dd8:	08 95       	ret

00000dda <__negsi2>:
 dda:	90 95       	com	r25
 ddc:	80 95       	com	r24
 dde:	70 95       	com	r23
 de0:	61 95       	neg	r22
 de2:	7f 4f       	sbci	r23, 0xFF	; 255
 de4:	8f 4f       	sbci	r24, 0xFF	; 255
 de6:	9f 4f       	sbci	r25, 0xFF	; 255
 de8:	08 95       	ret

00000dea <__muluhisi3>:
 dea:	0e 94 57 06 	call	0xcae	; 0xcae <__umulhisi3>
 dee:	a5 9f       	mul	r26, r21
 df0:	90 0d       	add	r25, r0
 df2:	b4 9f       	mul	r27, r20
 df4:	90 0d       	add	r25, r0
 df6:	a4 9f       	mul	r26, r20
 df8:	80 0d       	add	r24, r0
 dfa:	91 1d       	adc	r25, r1
 dfc:	11 24       	eor	r1, r1
 dfe:	08 95       	ret

00000e00 <__mulshisi3>:
 e00:	b7 ff       	sbrs	r27, 7
 e02:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__muluhisi3>

00000e06 <__mulohisi3>:
 e06:	0e 94 f5 06 	call	0xdea	; 0xdea <__muluhisi3>
 e0a:	82 1b       	sub	r24, r18
 e0c:	93 0b       	sbc	r25, r19
 e0e:	08 95       	ret

00000e10 <__udivmodsi4>:
 e10:	a1 e2       	ldi	r26, 0x21	; 33
 e12:	1a 2e       	mov	r1, r26
 e14:	aa 1b       	sub	r26, r26
 e16:	bb 1b       	sub	r27, r27
 e18:	fd 01       	movw	r30, r26
 e1a:	0d c0       	rjmp	.+26     	; 0xe36 <__udivmodsi4_ep>

00000e1c <__udivmodsi4_loop>:
 e1c:	aa 1f       	adc	r26, r26
 e1e:	bb 1f       	adc	r27, r27
 e20:	ee 1f       	adc	r30, r30
 e22:	ff 1f       	adc	r31, r31
 e24:	a2 17       	cp	r26, r18
 e26:	b3 07       	cpc	r27, r19
 e28:	e4 07       	cpc	r30, r20
 e2a:	f5 07       	cpc	r31, r21
 e2c:	20 f0       	brcs	.+8      	; 0xe36 <__udivmodsi4_ep>
 e2e:	a2 1b       	sub	r26, r18
 e30:	b3 0b       	sbc	r27, r19
 e32:	e4 0b       	sbc	r30, r20
 e34:	f5 0b       	sbc	r31, r21

00000e36 <__udivmodsi4_ep>:
 e36:	66 1f       	adc	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	88 1f       	adc	r24, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	1a 94       	dec	r1
 e40:	69 f7       	brne	.-38     	; 0xe1c <__udivmodsi4_loop>
 e42:	60 95       	com	r22
 e44:	70 95       	com	r23
 e46:	80 95       	com	r24
 e48:	90 95       	com	r25
 e4a:	9b 01       	movw	r18, r22
 e4c:	ac 01       	movw	r20, r24
 e4e:	bd 01       	movw	r22, r26
 e50:	cf 01       	movw	r24, r30
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
