
alarmClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000952  000009e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800114  00800114  000009fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d93  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000635  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b28  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000498  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000035a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 03 	call	0x782	; 0x782 <main>
  9e:	0c 94 a7 04 	jmp	0x94e	; 0x94e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initialization>:
 uint16_t cycle = LONG_DELAY + 10;


 void initialization()
 {
	initBoard();
  a6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initBoard>
	initDisplay();
  aa:	0e 94 b0 02 	call	0x560	; 0x560 <initDisplay>
	initTimer();
  ae:	0e 94 c6 03 	call	0x78c	; 0x78c <initTimer>
	AppKey_Init();
  b2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <AppKey_Init>
  b6:	08 95       	ret

000000b8 <keyProcess>:
	keyProcess();
}

void keyProcess()
{
	nEvent1 = AppKey_GetKeyEvent(0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AppKey_GetKeyEvent>
  be:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <nEvent1>
	nEvent2 = AppKey_GetKeyEvent(1);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AppKey_GetKeyEvent>
  c8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <nEvent2>

	uint16_t tmp;

	if (nEvent1 == KEY_EV_LONG && nEvent2 == KEY_EV_LONG)
  cc:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <nEvent1>
  d0:	92 30       	cpi	r25, 0x02	; 2
  d2:	09 f0       	breq	.+2      	; 0xd6 <keyProcess+0x1e>
  d4:	88 c0       	rjmp	.+272    	; 0x1e6 <keyProcess+0x12e>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	19 f5       	brne	.+70     	; 0x120 <keyProcess+0x68>
  da:	08 95       	ret
	}
	else
	{
		if (nEvent1 == KEY_EV_SHORT)
		{
			if (menu == 0)
  dc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <menu>
  e0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <menu+0x1>
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	39 f4       	brne	.+14     	; 0xf6 <keyProcess+0x3e>
			{
				menu = 10;
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
  f0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
  f4:	11 c0       	rjmp	.+34     	; 0x118 <keyProcess+0x60>
			}
			else if (menu == 10 || menu == 20)
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	91 05       	cpc	r25, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <keyProcess+0x46>
  fc:	78 c0       	rjmp	.+240    	; 0x1ee <keyProcess+0x136>
  fe:	44 97       	sbiw	r24, 0x14	; 20
 100:	09 f4       	brne	.+2      	; 0x104 <keyProcess+0x4c>
 102:	7c c0       	rjmp	.+248    	; 0x1fc <keyProcess+0x144>
						break;
				}
			}
			else
			{
				if (orientation == 1)
 104:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	19 f4       	brne	.+6      	; 0x112 <keyProcess+0x5a>
				{
					orientation = 0;
 10c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 110:	03 c0       	rjmp	.+6      	; 0x118 <keyProcess+0x60>
				}
				else
				{
					orientation = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
				}
			}
		}
		if (nEvent1 == KEY_EV_LONG)
 118:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <nEvent1>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	49 f4       	brne	.+18     	; 0x132 <keyProcess+0x7a>
		{
			menu = 0;
 120:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <menu+0x1>
 124:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <menu>
		}

		if (nEvent2 == KEY_EV_SHORT)
 128:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <nEvent2>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	61 f5       	brne	.+88     	; 0x188 <keyProcess+0xd0>
 130:	08 95       	ret
 132:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <nEvent2>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	39 f5       	brne	.+78     	; 0x188 <keyProcess+0xd0>
		{
			if (menu == 0)
 13a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <menu>
 13e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <menu+0x1>
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	09 f4       	brne	.+2      	; 0x148 <keyProcess+0x90>
 146:	7b c0       	rjmp	.+246    	; 0x23e <keyProcess+0x186>
			{
				//show alarm
			}
			else if (menu == 10)
 148:	8a 30       	cpi	r24, 0x0A	; 10
 14a:	91 05       	cpc	r25, r1
 14c:	39 f4       	brne	.+14     	; 0x15c <keyProcess+0xa4>
			{
				menu = menu + 10;
 14e:	84 e1       	ldi	r24, 0x14	; 20
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 156:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
 15a:	08 95       	ret
			}
			else if (menu == 20)
 15c:	44 97       	sbiw	r24, 0x14	; 20
 15e:	39 f4       	brne	.+14     	; 0x16e <keyProcess+0xb6>
			{
				menu = 10;
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 168:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
 16c:	08 95       	ret
			}
			else
			{
				par = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <par+0x1>
 176:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <par>
				cycle = LONG_DELAY + 10;
 17a:	8a e5       	ldi	r24, 0x5A	; 90
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 186:	08 95       	ret
			}
		}

		if (nEvent2 == KEY_EV_LONG)
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	09 f0       	breq	.+2      	; 0x18e <keyProcess+0xd6>
 18c:	58 c0       	rjmp	.+176    	; 0x23e <keyProcess+0x186>
		{
			if (menu == 0)
 18e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <menu>
 192:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <menu+0x1>
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	09 f4       	brne	.+2      	; 0x19c <keyProcess+0xe4>
 19a:	51 c0       	rjmp	.+162    	; 0x23e <keyProcess+0x186>
			{
				//set alarm
			}
			else if (menu == 10)
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	91 05       	cpc	r25, r1
 1a0:	39 f4       	brne	.+14     	; 0x1b0 <keyProcess+0xf8>
			{
				menu = menu + 10;
 1a2:	84 e1       	ldi	r24, 0x14	; 20
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 1aa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
 1ae:	08 95       	ret
			}
			else if (menu == 20)
 1b0:	44 97       	sbiw	r24, 0x14	; 20
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <keyProcess+0x10a>
			{
				menu = 10;
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 1bc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
 1c0:	08 95       	ret
			}
			else
			{
				par = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <par+0x1>
 1ca:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <par>
				if (cycle > LONG_DELAY + 5)
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d6:	86 35       	cpi	r24, 0x56	; 86
 1d8:	91 05       	cpc	r25, r1
 1da:	88 f1       	brcs	.+98     	; 0x23e <keyProcess+0x186>
				{
					cycle = 0;
 1dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 1e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 1e4:	08 95       	ret
	{
		//disable ALARM
	}
	else
	{
		if (nEvent1 == KEY_EV_SHORT)
 1e6:	91 30       	cpi	r25, 0x01	; 1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <keyProcess+0x134>
 1ea:	a3 cf       	rjmp	.-186    	; 0x132 <keyProcess+0x7a>
 1ec:	77 cf       	rjmp	.-274    	; 0xdc <keyProcess+0x24>
			{
				menu = 10;
			}
			else if (menu == 10 || menu == 20)
			{
				menu =  menu * 10;
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 1f6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
 1fa:	8e cf       	rjmp	.-228    	; 0x118 <keyProcess+0x60>
 1fc:	88 ec       	ldi	r24, 0xC8	; 200
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <menu+0x1>
 204:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <menu>
				{
					case 100 :
						break;

					case 200 :
						tmp = getTime();
 208:	0e 94 26 04 	call	0x84c	; 0x84c <getTime>
 20c:	ac 01       	movw	r20, r24
						tempHour = tmp / 100;
 20e:	9c 01       	movw	r18, r24
 210:	36 95       	lsr	r19
 212:	27 95       	ror	r18
 214:	36 95       	lsr	r19
 216:	27 95       	ror	r18
 218:	ab e7       	ldi	r26, 0x7B	; 123
 21a:	b4 e1       	ldi	r27, 0x14	; 20
 21c:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <tempHour>
						tempMin = tmp % 100;
 228:	64 e6       	ldi	r22, 0x64	; 100
 22a:	68 9f       	mul	r22, r24
 22c:	90 01       	movw	r18, r0
 22e:	69 9f       	mul	r22, r25
 230:	30 0d       	add	r19, r0
 232:	11 24       	eor	r1, r1
 234:	42 1b       	sub	r20, r18
 236:	53 0b       	sbc	r21, r19
 238:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <tempMin>
						break;
 23c:	6d cf       	rjmp	.-294    	; 0x118 <keyProcess+0x60>
 23e:	08 95       	ret

00000240 <mainApp>:
 }


void mainApp()
{
	timerProcess();
 240:	0e 94 e5 03 	call	0x7ca	; 0x7ca <timerProcess>
	displayProcess();
 244:	0e 94 08 03 	call	0x610	; 0x610 <displayProcess>

	switch (menu)
 248:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <menu>
 24c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <menu+0x1>
 250:	8a 30       	cpi	r24, 0x0A	; 10
 252:	91 05       	cpc	r25, r1
 254:	99 f0       	breq	.+38     	; 0x27c <mainApp+0x3c>
 256:	18 f4       	brcc	.+6      	; 0x25e <mainApp+0x1e>
 258:	89 2b       	or	r24, r25
 25a:	41 f0       	breq	.+16     	; 0x26c <mainApp+0x2c>
 25c:	a6 c0       	rjmp	.+332    	; 0x3aa <mainApp+0x16a>
 25e:	84 31       	cpi	r24, 0x14	; 20
 260:	91 05       	cpc	r25, r1
 262:	01 f1       	breq	.+64     	; 0x2a4 <mainApp+0x64>
 264:	88 3c       	cpi	r24, 0xC8	; 200
 266:	91 05       	cpc	r25, r1
 268:	71 f1       	breq	.+92     	; 0x2c6 <mainApp+0x86>
 26a:	9f c0       	rjmp	.+318    	; 0x3aa <mainApp+0x16a>
	{
		case 0 :
			getFlag(7);
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	0e 94 05 03 	call	0x60a	; 0x60a <getFlag>
			displayTime(getTime());
 272:	0e 94 26 04 	call	0x84c	; 0x84c <getTime>
 276:	0e 94 4b 03 	call	0x696	; 0x696 <displayTime>
			break;
 27a:	97 c0       	rjmp	.+302    	; 0x3aa <mainApp+0x16a>

		case 10 :
			getFlag(3);
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 05 03 	call	0x60a	; 0x60a <getFlag>
			displayMenu(SYM_A, 3);
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(SYM_L, 2);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(NONE, 1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(NONE, 0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			break;
 2a2:	83 c0       	rjmp	.+262    	; 0x3aa <mainApp+0x16a>

		case 20 :
			displayMenu(SYM_C, 3);
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(SYM_L, 2);
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(NONE, 1);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			displayMenu(NONE, 0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	0e 94 bb 03 	call	0x776	; 0x776 <displayMenu>
			break;
 2c4:	72 c0       	rjmp	.+228    	; 0x3aa <mainApp+0x16a>

		case 100 :
			break;

		case 200 :
			if (orientation == 0)
 2c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 2ca:	81 11       	cpse	r24, r1
 2cc:	36 c0       	rjmp	.+108    	; 0x33a <mainApp+0xfa>
			{
				getFlag(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 05 03 	call	0x60a	; 0x60a <getFlag>
				if (par == 1)
 2d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <par>
 2d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <par+0x1>
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	11 f5       	brne	.+68     	; 0x324 <mainApp+0xe4>
				{
					par = 0;
 2e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <par+0x1>
 2e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <par>
					if (cycle > LONG_DELAY)
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f0:	81 35       	cpi	r24, 0x51	; 81
 2f2:	91 05       	cpc	r25, r1
 2f4:	60 f0       	brcs	.+24     	; 0x30e <mainApp+0xce>
					{
						cycle = LONG_DELAY + 10;
 2f6:	8a e5       	ldi	r24, 0x5A	; 90
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						tempMin++;
 302:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tempMin>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <tempMin>
 30c:	05 c0       	rjmp	.+10     	; 0x318 <mainApp+0xd8>
					}
					else cycle++;
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					
					if (tempMin > 59)
 318:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tempMin>
 31c:	8c 33       	cpi	r24, 0x3C	; 60
 31e:	10 f0       	brcs	.+4      	; 0x324 <mainApp+0xe4>
					{
						tempMin = 0;
 320:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <tempMin>
					}
				}
				displayTime((uint16_t)tempMin);
 324:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tempMin>
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 4b 03 	call	0x696	; 0x696 <displayTime>
				setTime(tempMin, 0);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <tempMin>
 334:	0e 94 1c 04 	call	0x838	; 0x838 <setTime>
 338:	38 c0       	rjmp	.+112    	; 0x3aa <mainApp+0x16a>
			}
			else
			{
				getFlag(2);
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 05 03 	call	0x60a	; 0x60a <getFlag>
				if (par == 1)
 340:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <par>
 344:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <par+0x1>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	11 f5       	brne	.+68     	; 0x390 <mainApp+0x150>
				{
					par = 0;
 34c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <par+0x1>
 350:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <par>
					if (cycle > LONG_DELAY) 
 354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 358:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 35c:	81 35       	cpi	r24, 0x51	; 81
 35e:	91 05       	cpc	r25, r1
 360:	60 f0       	brcs	.+24     	; 0x37a <mainApp+0x13a>
					{
						cycle = LONG_DELAY + 10;
 362:	8a e5       	ldi	r24, 0x5A	; 90
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 36a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						tempHour++;
 36e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tempHour>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <tempHour>
 378:	05 c0       	rjmp	.+10     	; 0x384 <mainApp+0x144>
					}
					else cycle++;
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 380:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					if (tempHour > 23)
 384:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tempHour>
 388:	88 31       	cpi	r24, 0x18	; 24
 38a:	10 f0       	brcs	.+4      	; 0x390 <mainApp+0x150>
					{
						tempHour = 0;
 38c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <tempHour>
					}
				}
				displayTime((uint16_t)tempHour * 100);
 390:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tempHour>
 394:	24 e6       	ldi	r18, 0x64	; 100
 396:	82 9f       	mul	r24, r18
 398:	c0 01       	movw	r24, r0
 39a:	11 24       	eor	r1, r1
 39c:	0e 94 4b 03 	call	0x696	; 0x696 <displayTime>
				setTime(tempHour, 1);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <tempHour>
 3a6:	0e 94 1c 04 	call	0x838	; 0x838 <setTime>
	}
	
	
	
	
	AppKey_Process();
 3aa:	0e 94 a9 02 	call	0x552	; 0x552 <AppKey_Process>
	keyProcess();
 3ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <keyProcess>
 3b2:	08 95       	ret

000003b4 <initBoard>:


  void initBoard()
  {
	  #ifdef PORTB_SETTING
	  DDRB  = DDRB_SETTING;														// Set PortB direction register
 3b4:	88 e1       	ldi	r24, 0x18	; 24
 3b6:	84 b9       	out	0x04, r24	; 4
	  PORTB = PORTB_SETTING;														// Set PortB output register
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	85 b9       	out	0x05, r24	; 5
	  #endif

	  #ifdef PORTC_SETTING
	  DDRC  = DDRC_SETTING;														// Set PortC direction register
 3bc:	9f e3       	ldi	r25, 0x3F	; 63
 3be:	97 b9       	out	0x07, r25	; 7
	  PORTC = PORTC_SETTING;														// Set PortC output register
 3c0:	90 ec       	ldi	r25, 0xC0	; 192
 3c2:	98 b9       	out	0x08, r25	; 8
	  #endif

	  #ifdef PORTD_SETTING
	  DDRD  = DDRD_SETTING;														// Set PortD direction register
 3c4:	8a b9       	out	0x0a, r24	; 10
	  PORTD = PORTD_SETTING;														// Set PortD output register
 3c6:	8f e9       	ldi	r24, 0x9F	; 159
 3c8:	8b b9       	out	0x0b, r24	; 11
 3ca:	08 95       	ret

000003cc <AppKey_Init>:

 static KeyChannel_t m_pKeys[APP_KEY_COUNT];


 bool_t AppKey_Init()
 {
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 m_pKeys[nIndex].nLastTime = getTimeMs();							// Time stamp of last event
 3d0:	0e 94 31 04 	call	0x862	; 0x862 <getTimeMs>
 3d4:	c9 e1       	ldi	r28, 0x19	; 25
 3d6:	d1 e0       	ldi	r29, 0x01	; 1
 3d8:	99 83       	std	Y+1, r25	; 0x01
 3da:	88 83       	st	Y, r24
		 m_pKeys[nIndex].nState = KEY_ST_OFF;									// State of key
 3dc:	1a 82       	std	Y+2, r1	; 0x02
 {
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 m_pKeys[nIndex].nLastTime = getTimeMs();							// Time stamp of last event
 3de:	0e 94 31 04 	call	0x862	; 0x862 <getTimeMs>
 3e2:	9c 83       	std	Y+4, r25	; 0x04
 3e4:	8b 83       	std	Y+3, r24	; 0x03
		 m_pKeys[nIndex].nState = KEY_ST_OFF;									// State of key
 3e6:	1d 82       	std	Y+5, r1	; 0x05
	 }

	 return TRUE;																// Return success
 }
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <AppKey_GetKeyEvent>:

 uint8_t AppKey_GetKeyEvent(uint8_t nKeyNo)
 {
	 uint8_t nEvent;																// The key event

	 if (nKeyNo >= APP_KEY_COUNT)												// If key no out of range
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	78 f4       	brcc	.+30     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
	 {
		 return FALSE;															// Return error
	 }

	 nEvent = GET_APP_KEY_EVENT(m_pKeys + nKeyNo);								// Extract the event
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	fc 01       	movw	r30, r24
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	8e 0f       	add	r24, r30
 3fe:	9f 1f       	adc	r25, r31
 400:	fc 01       	movw	r30, r24
 402:	e7 5e       	subi	r30, 0xE7	; 231
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	82 81       	ldd	r24, Z+2	; 0x02
	 SET_APP_KEY_EVENT(m_pKeys + nKeyNo, KEY_EV_NONE);							// Clear the event
 408:	98 2f       	mov	r25, r24
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	92 83       	std	Z+2, r25	; 0x02
	 return nEvent;																// Return the event
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	08 95       	ret
 {
	 uint8_t nEvent;																// The key event

	 if (nKeyNo >= APP_KEY_COUNT)												// If key no out of range
	 {
		 return FALSE;															// Return error
 412:	80 e0       	ldi	r24, 0x00	; 0
	 }

	 nEvent = GET_APP_KEY_EVENT(m_pKeys + nKeyNo);								// Extract the event
	 SET_APP_KEY_EVENT(m_pKeys + nKeyNo, KEY_EV_NONE);							// Clear the event
	 return nEvent;																// Return the event
 }
 414:	08 95       	ret

00000416 <AppKey_IsKeyPressed>:
 ///			FALSE if released and on error

 bool_t AppKey_IsKeyPressed(uint8_t nChannel)
 {

	 switch (nChannel)															// Switch due to channel no.
 416:	88 23       	and	r24, r24
 418:	19 f0       	breq	.+6      	; 0x420 <AppKey_IsKeyPressed+0xa>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	29 f0       	breq	.+10     	; 0x428 <AppKey_IsKeyPressed+0x12>
 41e:	0b c0       	rjmp	.+22     	; 0x436 <AppKey_IsKeyPressed+0x20>
	 {
		 case 0:																	// Case: Channel #0
		 return IS_KEY_PRESSED_0;											// Return key state
 420:	83 b1       	in	r24, 0x03	; 3
 422:	80 95       	com	r24
 424:	81 70       	andi	r24, 0x01	; 1
 426:	08 95       	ret

		 case 1:																	// Case: Channel #1
		 return IS_KEY_PRESSED_1;											// Return key state
 428:	83 b1       	in	r24, 0x03	; 3
 42a:	81 fb       	bst	r24, 1
 42c:	99 27       	eor	r25, r25
 42e:	90 f9       	bld	r25, 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	89 27       	eor	r24, r25
 434:	08 95       	ret

		 default:																// On any other value
		 return FALSE;														// Return error
 436:	80 e0       	ldi	r24, 0x00	; 0
	 }

 438:	08 95       	ret

0000043a <AppKey_ProcessChannel>:
 /// This function has to be called periodically in main level.
 ///
 /// @param[in] nChannel current channel

 void AppKey_ProcessChannel(uint8_t nChannel)
 {
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
	 KeyChannel_t* pThis;														// Pointer to current channel

	 pThis = &m_pKeys[nChannel];													// Get pointer to channel
 43e:	c8 2f       	mov	r28, r24
 440:	d0 e0       	ldi	r29, 0x00	; 0

	 switch (GET_APP_KEY_STATE(pThis))											// Switch due to key state
 442:	fe 01       	movw	r30, r28
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	e7 5e       	subi	r30, 0xE7	; 231
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	92 81       	ldd	r25, Z+2	; 0x02
 452:	90 7f       	andi	r25, 0xF0	; 240
 454:	90 31       	cpi	r25, 0x10	; 16
 456:	d1 f0       	breq	.+52     	; 0x48c <AppKey_ProcessChannel+0x52>
 458:	90 34       	cpi	r25, 0x40	; 64
 45a:	09 f4       	brne	.+2      	; 0x45e <AppKey_ProcessChannel+0x24>
 45c:	57 c0       	rjmp	.+174    	; 0x50c <AppKey_ProcessChannel+0xd2>
 45e:	91 11       	cpse	r25, r1
 460:	6d c0       	rjmp	.+218    	; 0x53c <AppKey_ProcessChannel+0x102>
	 {
		 case KEY_ST_OFF:														// State is off, key was up

		 if (AppKey_IsKeyPressed(nChannel))									// If key actually is pressed
 462:	0e 94 0b 02 	call	0x416	; 0x416 <AppKey_IsKeyPressed>
 466:	88 23       	and	r24, r24
 468:	09 f4       	brne	.+2      	; 0x46c <AppKey_ProcessChannel+0x32>
 46a:	70 c0       	rjmp	.+224    	; 0x54c <AppKey_ProcessChannel+0x112>
		 {
			 pThis->nLastTime = getTimeMs();							// Get current time
 46c:	0e 94 31 04 	call	0x862	; 0x862 <getTimeMs>
 470:	9e 01       	movw	r18, r28
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	c2 0f       	add	r28, r18
 478:	d3 1f       	adc	r29, r19
 47a:	c7 5e       	subi	r28, 0xE7	; 231
 47c:	de 4f       	sbci	r29, 0xFE	; 254
 47e:	99 83       	std	Y+1, r25	; 0x01
 480:	88 83       	st	Y, r24
			 SET_APP_KEY_STATE(pThis, KEY_ST_NEW);							// Set new state
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 61       	ori	r24, 0x10	; 16
 488:	8a 83       	std	Y+2, r24	; 0x02
 48a:	60 c0       	rjmp	.+192    	; 0x54c <AppKey_ProcessChannel+0x112>

		 break;

		 case KEY_ST_NEW:														// State is new pressed, key was down

		 if (AppKey_IsKeyPressed(nChannel))									// If key still is pressed
 48c:	0e 94 0b 02 	call	0x416	; 0x416 <AppKey_IsKeyPressed>
 490:	88 23       	and	r24, r24
 492:	c9 f0       	breq	.+50     	; 0x4c6 <AppKey_ProcessChannel+0x8c>
		 {
			 if (getDelayMs(pThis->nLastTime)
 494:	fe 01       	movw	r30, r28
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ec 0f       	add	r30, r28
 49c:	fd 1f       	adc	r31, r29
 49e:	e7 5e       	subi	r30, 0xE7	; 231
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	80 81       	ld	r24, Z
 4a4:	91 81       	ldd	r25, Z+1	; 0x01
 4a6:	0e 94 3f 04 	call	0x87e	; 0x87e <getDelayMs>
 4aa:	85 3f       	cpi	r24, 0xF5	; 245
 4ac:	91 40       	sbci	r25, 0x01	; 1
 4ae:	08 f4       	brcc	.+2      	; 0x4b2 <AppKey_ProcessChannel+0x78>
 4b0:	4d c0       	rjmp	.+154    	; 0x54c <AppKey_ProcessChannel+0x112>
			 > KEY_TIME_LONG)											// If delay is enough
			 {
				 SET_APP_KEY_STATE(pThis, KEY_ST_LONG);						// Set new state
				 SET_APP_KEY_EVENT(pThis, KEY_EV_LONG);						// Set new state
 4b2:	ce 01       	movw	r24, r28
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	c8 0f       	add	r28, r24
 4ba:	d9 1f       	adc	r29, r25
 4bc:	c7 5e       	subi	r28, 0xE7	; 231
 4be:	de 4f       	sbci	r29, 0xFE	; 254
 4c0:	82 e4       	ldi	r24, 0x42	; 66
 4c2:	8a 83       	std	Y+2, r24	; 0x02
 4c4:	43 c0       	rjmp	.+134    	; 0x54c <AppKey_ProcessChannel+0x112>

		 }
		 else																// If key is released
		 {

			 if (getDelayMs(pThis->nLastTime)
 4c6:	fe 01       	movw	r30, r28
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	ec 0f       	add	r30, r28
 4ce:	fd 1f       	adc	r31, r29
 4d0:	e7 5e       	subi	r30, 0xE7	; 231
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	80 81       	ld	r24, Z
 4d6:	91 81       	ldd	r25, Z+1	; 0x01
 4d8:	0e 94 3f 04 	call	0x87e	; 0x87e <getDelayMs>
 4dc:	cd 97       	sbiw	r24, 0x3d	; 61
 4de:	58 f0       	brcs	.+22     	; 0x4f6 <AppKey_ProcessChannel+0xbc>
			 > KEY_TIME_SHORT)											// If time is enough
			 {
				 SET_APP_KEY_EVENT(pThis, KEY_EV_SHORT);						// Set new state
 4e0:	fe 01       	movw	r30, r28
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	ec 0f       	add	r30, r28
 4e8:	fd 1f       	adc	r31, r29
 4ea:	e7 5e       	subi	r30, 0xE7	; 231
 4ec:	fe 4f       	sbci	r31, 0xFE	; 254
 4ee:	82 81       	ldd	r24, Z+2	; 0x02
 4f0:	80 7f       	andi	r24, 0xF0	; 240
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	82 83       	std	Z+2, r24	; 0x02
			 }

			 SET_APP_KEY_STATE(pThis, KEY_ST_OFF);							// Set new state
 4f6:	ce 01       	movw	r24, r28
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	c8 0f       	add	r28, r24
 4fe:	d9 1f       	adc	r29, r25
 500:	c7 5e       	subi	r28, 0xE7	; 231
 502:	de 4f       	sbci	r29, 0xFE	; 254
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	8f 70       	andi	r24, 0x0F	; 15
 508:	8a 83       	std	Y+2, r24	; 0x02
 50a:	20 c0       	rjmp	.+64     	; 0x54c <AppKey_ProcessChannel+0x112>

		 break;

		 case KEY_ST_LONG:														// If state is on, key still pressed

		 if (!AppKey_IsKeyPressed(nChannel))									// If key actually is pressed
 50c:	0e 94 0b 02 	call	0x416	; 0x416 <AppKey_IsKeyPressed>
 510:	81 11       	cpse	r24, r1
 512:	0a c0       	rjmp	.+20     	; 0x528 <AppKey_ProcessChannel+0xee>
		 {
			 SET_APP_KEY_STATE (pThis, KEY_ST_OFF);							// Set new state
			 SET_APP_KEY_EVENT (pThis, KEY_EV_RELEASE);						// Release-Event-NEW
 514:	ce 01       	movw	r24, r28
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	c8 0f       	add	r28, r24
 51c:	d9 1f       	adc	r29, r25
 51e:	c7 5e       	subi	r28, 0xE7	; 231
 520:	de 4f       	sbci	r29, 0xFE	; 254
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	8a 83       	std	Y+2, r24	; 0x02
 526:	12 c0       	rjmp	.+36     	; 0x54c <AppKey_ProcessChannel+0x112>
		 }
		 else
		 {
			SET_APP_KEY_STATE(pThis, KEY_ST_LONG);						// Set new state
			SET_APP_KEY_EVENT(pThis, KEY_EV_LONG);						// Set new state
 528:	ce 01       	movw	r24, r28
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	c8 0f       	add	r28, r24
 530:	d9 1f       	adc	r29, r25
 532:	c7 5e       	subi	r28, 0xE7	; 231
 534:	de 4f       	sbci	r29, 0xFE	; 254
 536:	82 e4       	ldi	r24, 0x42	; 66
 538:	8a 83       	std	Y+2, r24	; 0x02
 53a:	08 c0       	rjmp	.+16     	; 0x54c <AppKey_ProcessChannel+0x112>
		 }

		 break;

		 default:
		 pThis->nState = KEY_ST_OFF;											// Set to state OFF
 53c:	ce 01       	movw	r24, r28
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	c8 0f       	add	r28, r24
 544:	d9 1f       	adc	r29, r25
 546:	c7 5e       	subi	r28, 0xE7	; 231
 548:	de 4f       	sbci	r29, 0xFE	; 254
 54a:	1a 82       	std	Y+2, r1	; 0x02
		 break;
	 }

 }
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <AppKey_Process>:
 {
	 uint8_t nIndex;																// Index for loop

	 for (nIndex = 0; nIndex < APP_KEY_COUNT; nIndex++)							// For any channel
	 {
		 AppKey_ProcessChannel(nIndex);											// Call state machine
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 1d 02 	call	0x43a	; 0x43a <AppKey_ProcessChannel>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 1d 02 	call	0x43a	; 0x43a <AppKey_ProcessChannel>
 55e:	08 95       	ret

00000560 <initDisplay>:
 uint8_t flag = 7;


 void initDisplay()
 {
	SET_L1;
 560:	58 9a       	sbi	0x0b, 0	; 11
	SET_L2;
 562:	59 9a       	sbi	0x0b, 1	; 11
	SET_L3;
 564:	5a 9a       	sbi	0x0b, 2	; 11
	SET_L4;
 566:	5b 9a       	sbi	0x0b, 3	; 11
	SET_L5;
 568:	5c 9a       	sbi	0x0b, 4	; 11
	SET_L6;
 56a:	2b 9a       	sbi	0x05, 3	; 5
	SET_L7;
 56c:	2c 9a       	sbi	0x05, 4	; 5
	
	SET_D1;
 56e:	40 9a       	sbi	0x08, 0	; 8
	SET_D2;
 570:	41 9a       	sbi	0x08, 1	; 8
	SET_D3;
 572:	42 9a       	sbi	0x08, 2	; 8
	SET_D4;
 574:	43 9a       	sbi	0x08, 3	; 8

	SET_D5;
 576:	44 9a       	sbi	0x08, 4	; 8
	SET_D6;
 578:	45 9a       	sbi	0x08, 5	; 8

	CLR_PWM;
 57a:	5f 98       	cbi	0x0b, 7	; 11
 57c:	08 95       	ret

0000057e <setSymbol>:
 }

 void setSymbol(uint8_t num)
 {
	if (symbols[num] & BIT0) CLR_L1;
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	ed 5f       	subi	r30, 0xFD	; 253
 584:	fe 4f       	sbci	r31, 0xFE	; 254
 586:	20 81       	ld	r18, Z
 588:	20 ff       	sbrs	r18, 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <setSymbol+0x12>
 58c:	58 98       	cbi	0x0b, 0	; 11
 58e:	01 c0       	rjmp	.+2      	; 0x592 <setSymbol+0x14>
	else SET_L1;
 590:	58 9a       	sbi	0x0b, 0	; 11

	if (symbols[num] & BIT1) CLR_L2;
 592:	fc 01       	movw	r30, r24
 594:	ed 5f       	subi	r30, 0xFD	; 253
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	20 81       	ld	r18, Z
 59a:	21 ff       	sbrs	r18, 1
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <setSymbol+0x24>
 59e:	59 98       	cbi	0x0b, 1	; 11
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <setSymbol+0x26>
	else SET_L2;
 5a2:	59 9a       	sbi	0x0b, 1	; 11

	if (symbols[num] & BIT2) CLR_L3;
 5a4:	fc 01       	movw	r30, r24
 5a6:	ed 5f       	subi	r30, 0xFD	; 253
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	20 81       	ld	r18, Z
 5ac:	22 ff       	sbrs	r18, 2
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <setSymbol+0x36>
 5b0:	5a 98       	cbi	0x0b, 2	; 11
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <setSymbol+0x38>
	else SET_L3;
 5b4:	5a 9a       	sbi	0x0b, 2	; 11

	if (symbols[num] & BIT3) CLR_L4;
 5b6:	fc 01       	movw	r30, r24
 5b8:	ed 5f       	subi	r30, 0xFD	; 253
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	20 81       	ld	r18, Z
 5be:	23 ff       	sbrs	r18, 3
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <setSymbol+0x48>
 5c2:	5b 98       	cbi	0x0b, 3	; 11
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <setSymbol+0x4a>
	else SET_L4;
 5c6:	5b 9a       	sbi	0x0b, 3	; 11

	if (symbols[num] & BIT4) CLR_L5;
 5c8:	fc 01       	movw	r30, r24
 5ca:	ed 5f       	subi	r30, 0xFD	; 253
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	20 81       	ld	r18, Z
 5d0:	24 ff       	sbrs	r18, 4
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <setSymbol+0x5a>
 5d4:	5c 98       	cbi	0x0b, 4	; 11
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <setSymbol+0x5c>
	else SET_L5;
 5d8:	5c 9a       	sbi	0x0b, 4	; 11

	if (symbols[num] & BIT5) CLR_L6;
 5da:	fc 01       	movw	r30, r24
 5dc:	ed 5f       	subi	r30, 0xFD	; 253
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	20 81       	ld	r18, Z
 5e2:	25 ff       	sbrs	r18, 5
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <setSymbol+0x6c>
 5e6:	2b 98       	cbi	0x05, 3	; 5
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <setSymbol+0x6e>
	else SET_L6;
 5ea:	2b 9a       	sbi	0x05, 3	; 5

	if (symbols[num] & BIT6) CLR_L7;
 5ec:	fc 01       	movw	r30, r24
 5ee:	ed 5f       	subi	r30, 0xFD	; 253
 5f0:	fe 4f       	sbci	r31, 0xFE	; 254
 5f2:	80 81       	ld	r24, Z
 5f4:	86 ff       	sbrs	r24, 6
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <setSymbol+0x7e>
 5f8:	2c 98       	cbi	0x05, 4	; 5
 5fa:	08 95       	ret
	else SET_L7;
 5fc:	2c 9a       	sbi	0x05, 4	; 5
 5fe:	08 95       	ret

00000600 <dots>:
 }

 void dots()
 {
	if (flag & BIT2)
 600:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 604:	82 fd       	sbrc	r24, 2
	{
		SET_D5;
 606:	44 9a       	sbi	0x08, 4	; 8
 608:	08 95       	ret

0000060a <getFlag>:
	}
 }

 void getFlag(uint8_t fl)
 {
	flag = fl;
 60a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
 60e:	08 95       	ret

00000610 <displayProcess>:

void displayProcess()
{
	
	
	setSymbol(regValue[0]);
 610:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <regValue>
 614:	0e 94 bf 02 	call	0x57e	; 0x57e <setSymbol>
	if (flag & BIT0)
 618:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 61c:	80 fd       	sbrc	r24, 0
	{
		CLR_D1;
 61e:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 620:	8b e4       	ldi	r24, 0x4B	; 75
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <displayProcess+0x14>
 628:	00 c0       	rjmp	.+0      	; 0x62a <displayProcess+0x1a>
 62a:	00 00       	nop
	}
	_delay_us(90);

	SET_D1;
 62c:	40 9a       	sbi	0x08, 0	; 8
	setSymbol(regValue[1]);
 62e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <regValue+0x1>
 632:	0e 94 bf 02 	call	0x57e	; 0x57e <setSymbol>
	if (flag & BIT0)
 636:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 63a:	80 fd       	sbrc	r24, 0
	{
		CLR_D2;
 63c:	41 98       	cbi	0x08, 1	; 8
 63e:	8b e4       	ldi	r24, 0x4B	; 75
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <displayProcess+0x32>
 646:	00 c0       	rjmp	.+0      	; 0x648 <displayProcess+0x38>
 648:	00 00       	nop
	}
	_delay_us(90);

	SET_D2;
 64a:	41 9a       	sbi	0x08, 1	; 8
	setSymbol(regValue[2]);
 64c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <regValue+0x2>
 650:	0e 94 bf 02 	call	0x57e	; 0x57e <setSymbol>
	if (flag & BIT1)
 654:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 658:	81 fd       	sbrc	r24, 1
	{
		CLR_D3;
 65a:	42 98       	cbi	0x08, 2	; 8
 65c:	8b e4       	ldi	r24, 0x4B	; 75
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <displayProcess+0x50>
 664:	00 c0       	rjmp	.+0      	; 0x666 <displayProcess+0x56>
 666:	00 00       	nop
	}
	_delay_us(90);

	SET_D3;
 668:	42 9a       	sbi	0x08, 2	; 8
	setSymbol(regValue[3]);
 66a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <regValue+0x3>
 66e:	0e 94 bf 02 	call	0x57e	; 0x57e <setSymbol>
	if (flag & BIT1)
 672:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 676:	81 fd       	sbrc	r24, 1
	{
		CLR_D4;
 678:	43 98       	cbi	0x08, 3	; 8
 67a:	8b e4       	ldi	r24, 0x4B	; 75
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <displayProcess+0x6e>
 682:	00 c0       	rjmp	.+0      	; 0x684 <displayProcess+0x74>
 684:	00 00       	nop
	}
	_delay_us(90);
	
	SET_D4;
 686:	43 9a       	sbi	0x08, 3	; 8
 688:	85 ef       	ldi	r24, 0xF5	; 245
 68a:	9c e0       	ldi	r25, 0x0C	; 12
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <displayProcess+0x7c>
 690:	00 c0       	rjmp	.+0      	; 0x692 <displayProcess+0x82>
 692:	00 00       	nop
 694:	08 95       	ret

00000696 <displayTime>:
	_delay_us(900);
}


void displayTime(uint16_t lTime)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	ec 01       	movw	r28, r24
	regValue[0] = lTime % 10;
 69c:	ef e1       	ldi	r30, 0x1F	; 31
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	9c 01       	movw	r18, r24
 6a2:	ad ec       	ldi	r26, 0xCD	; 205
 6a4:	bc ec       	ldi	r27, 0xCC	; 204
 6a6:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 6aa:	ac 01       	movw	r20, r24
 6ac:	56 95       	lsr	r21
 6ae:	47 95       	ror	r20
 6b0:	56 95       	lsr	r21
 6b2:	47 95       	ror	r20
 6b4:	56 95       	lsr	r21
 6b6:	47 95       	ror	r20
 6b8:	ca 01       	movw	r24, r20
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	44 0f       	add	r20, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	44 0f       	add	r20, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	48 0f       	add	r20, r24
 6cc:	59 1f       	adc	r21, r25
 6ce:	ce 01       	movw	r24, r28
 6d0:	84 1b       	sub	r24, r20
 6d2:	95 0b       	sbc	r25, r21
 6d4:	80 83       	st	Z, r24
	lTime /= 10;
 6d6:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 6da:	ec 01       	movw	r28, r24
 6dc:	d6 95       	lsr	r29
 6de:	c7 95       	ror	r28
 6e0:	d6 95       	lsr	r29
 6e2:	c7 95       	ror	r28
 6e4:	d6 95       	lsr	r29
 6e6:	c7 95       	ror	r28
	regValue[1] = lTime % 10;
 6e8:	9e 01       	movw	r18, r28
 6ea:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 6ee:	ac 01       	movw	r20, r24
 6f0:	56 95       	lsr	r21
 6f2:	47 95       	ror	r20
 6f4:	56 95       	lsr	r21
 6f6:	47 95       	ror	r20
 6f8:	56 95       	lsr	r21
 6fa:	47 95       	ror	r20
 6fc:	ca 01       	movw	r24, r20
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	44 0f       	add	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	44 0f       	add	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	48 0f       	add	r20, r24
 710:	59 1f       	adc	r21, r25
 712:	ce 01       	movw	r24, r28
 714:	84 1b       	sub	r24, r20
 716:	95 0b       	sbc	r25, r21
 718:	81 83       	std	Z+1, r24	; 0x01
	lTime /= 10;
 71a:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 71e:	ec 01       	movw	r28, r24
 720:	d6 95       	lsr	r29
 722:	c7 95       	ror	r28
 724:	d6 95       	lsr	r29
 726:	c7 95       	ror	r28
 728:	d6 95       	lsr	r29
 72a:	c7 95       	ror	r28
	regValue[2] = lTime % 10;
 72c:	9e 01       	movw	r18, r28
 72e:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 732:	ac 01       	movw	r20, r24
 734:	56 95       	lsr	r21
 736:	47 95       	ror	r20
 738:	56 95       	lsr	r21
 73a:	47 95       	ror	r20
 73c:	56 95       	lsr	r21
 73e:	47 95       	ror	r20
 740:	ca 01       	movw	r24, r20
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	44 0f       	add	r20, r20
 74c:	55 1f       	adc	r21, r21
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	48 0f       	add	r20, r24
 754:	59 1f       	adc	r21, r25
 756:	ce 01       	movw	r24, r28
 758:	84 1b       	sub	r24, r20
 75a:	95 0b       	sbc	r25, r21
 75c:	82 83       	std	Z+2, r24	; 0x02
	regValue[3] = lTime / 10;
 75e:	0e 94 98 04 	call	0x930	; 0x930 <__umulhisi3>
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	83 83       	std	Z+3, r24	; 0x03
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <displayMenu>:

void displayMenu(uint8_t sym, uint8_t pos)
{
	regValue[pos] = sym;
 776:	e6 2f       	mov	r30, r22
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	e1 5e       	subi	r30, 0xE1	; 225
 77c:	fe 4f       	sbci	r31, 0xFE	; 254
 77e:	80 83       	st	Z, r24
 780:	08 95       	ret

00000782 <main>:
#include "display.h"


int main(void)
{
	initialization();
 782:	0e 94 53 00 	call	0xa6	; 0xa6 <initialization>

    while (1) 
    {
		mainApp();
 786:	0e 94 20 01 	call	0x240	; 0x240 <mainApp>
    }
 78a:	fd cf       	rjmp	.-6      	; 0x786 <main+0x4>

0000078c <initTimer>:
  static volatile uint16_t globalTime;
  uint16_t localTime = 0;
 
  void initTimer()
  {
	  DISABLE_TIMER_INT;														// Disable KNX timer interrupt
 78c:	ef e6       	ldi	r30, 0x6F	; 111
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	8d 7f       	andi	r24, 0xFD	; 253
 794:	80 83       	st	Z, r24

	  globalTime		= 0;													// Reset system time
 796:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <globalTime+0x1>
 79a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <globalTime>

	  OCR1A  += TICKS_PER_MSECOND;												// Set first clock period
 79e:	a8 e8       	ldi	r26, 0x88	; 136
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	8d 91       	ld	r24, X+
 7a4:	9c 91       	ld	r25, X
 7a6:	11 97       	sbiw	r26, 0x01	; 1
 7a8:	87 56       	subi	r24, 0x67	; 103
 7aa:	96 4c       	sbci	r25, 0xC6	; 198
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	9c 93       	st	X, r25
 7b0:	8e 93       	st	-X, r24

	  TCCR1A	= 0;																// Set TimerMode to Normal
 7b2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	  TCCR1B |= (1 << CS10);														// Select source clock: ClckIo, no pre-scaler; set TimerMode
 7b6:	a1 e8       	ldi	r26, 0x81	; 129
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	8c 91       	ld	r24, X
 7bc:	81 60       	ori	r24, 0x01	; 1
 7be:	8c 93       	st	X, r24

	  ENABLE_INTERRUPTS;
 7c0:	78 94       	sei
	  ENABLE_TIMER_INT;														// Enable send timer interrupt (1 ms)
 7c2:	80 81       	ld	r24, Z
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	80 83       	st	Z, r24
 7c8:	08 95       	ret

000007ca <timerProcess>:
  }


void timerProcess()
{
	if (localTime > 499)
 7ca:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <localTime>
 7ce:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <localTime+0x1>
 7d2:	84 3f       	cpi	r24, 0xF4	; 244
 7d4:	91 40       	sbci	r25, 0x01	; 1
 7d6:	08 f0       	brcs	.+2      	; 0x7da <timerProcess+0x10>
	{
		CLR_D5;
 7d8:	44 98       	cbi	0x08, 4	; 8
	}
	if (localTime > 999)
 7da:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <localTime>
 7de:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <localTime+0x1>
 7e2:	88 3e       	cpi	r24, 0xE8	; 232
 7e4:	93 40       	sbci	r25, 0x03	; 3
 7e6:	58 f0       	brcs	.+22     	; 0x7fe <timerProcess+0x34>
	{
		dots();
 7e8:	0e 94 00 03 	call	0x600	; 0x600 <dots>
		localTime = 0;
 7ec:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <localTime+0x1>
 7f0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <localTime>
		sec++;
 7f4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sec>
 7f8:	8f 5f       	subi	r24, 0xFF	; 255
 7fa:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <sec>
	}

	if (sec > 59)
 7fe:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <sec>
 802:	8c 33       	cpi	r24, 0x3C	; 60
 804:	38 f0       	brcs	.+14     	; 0x814 <timerProcess+0x4a>
	{
		sec = 0;
 806:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sec>
		min++;
 80a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <min>
	}
	if (min > 59)
 814:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 818:	8c 33       	cpi	r24, 0x3C	; 60
 81a:	38 f0       	brcs	.+14     	; 0x82a <timerProcess+0x60>
	{
		min = 0;
 81c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <min>
		hour++;
 820:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <hour>
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <hour>
	}
	if (hour > 23)
 82a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <hour>
 82e:	88 31       	cpi	r24, 0x18	; 24
 830:	10 f0       	brcs	.+4      	; 0x836 <timerProcess+0x6c>
	{
		hour = 0;
 832:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <hour>
 836:	08 95       	ret

00000838 <setTime>:
	}
}

void setTime(uint8_t lTime, uint8_t hl)
{
	sec = 0;
 838:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sec>
	if (hl == 0)
 83c:	61 11       	cpse	r22, r1
 83e:	03 c0       	rjmp	.+6      	; 0x846 <setTime+0xe>
	{
		min = lTime;
 840:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <min>
 844:	08 95       	ret
	}
	else
	{
		hour = lTime;
 846:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <hour>
 84a:	08 95       	ret

0000084c <getTime>:
	}
}

uint16_t getTime()
{
	return (hour * 100) + min;
 84c:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <hour>
 850:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <min>
 854:	90 e0       	ldi	r25, 0x00	; 0
}
 856:	34 e6       	ldi	r19, 0x64	; 100
 858:	23 9f       	mul	r18, r19
 85a:	80 0d       	add	r24, r0
 85c:	91 1d       	adc	r25, r1
 85e:	11 24       	eor	r1, r1
 860:	08 95       	ret

00000862 <getTimeMs>:

  uint16_t getTimeMs()
  {
	  uint16_t nTime;																// Variable for time

	  DISABLE_TIMER_INT;														// Prevent from timer interrupt processing
 862:	ef e6       	ldi	r30, 0x6F	; 111
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8d 7f       	andi	r24, 0xFD	; 253
 86a:	80 83       	st	Z, r24
	  nTime = (uint16_t)globalTime;											// Get actual time
 86c:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <globalTime>
 870:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <globalTime+0x1>
	  ENABLE_TIMER_INT;														// Re-enable timer interrupt
 874:	90 81       	ld	r25, Z
 876:	92 60       	ori	r25, 0x02	; 2
 878:	90 83       	st	Z, r25

	  return nTime;																// Return current time
  }
 87a:	c9 01       	movw	r24, r18
 87c:	08 95       	ret

0000087e <getDelayMs>:

  uint16_t getDelayMs(uint16_t nOldTime)
  {
	  uint16_t nDelay;															// Variable for delay

	  DISABLE_TIMER_INT;														// Prevent from timer interrupt processing
 87e:	ef e6       	ldi	r30, 0x6F	; 111
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	20 81       	ld	r18, Z
 884:	2d 7f       	andi	r18, 0xFD	; 253
 886:	20 83       	st	Z, r18
	  nDelay = (uint16_t)globalTime - nOldTime;								// Calculate delay
 888:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <globalTime>
 88c:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <globalTime+0x1>
	  ENABLE_TIMER_INT;														// Re-enable timer interrupt
 890:	20 81       	ld	r18, Z
 892:	22 60       	ori	r18, 0x02	; 2
 894:	20 83       	st	Z, r18

	  return nDelay;																// Return delay
  }
 896:	9a 01       	movw	r18, r20
 898:	28 1b       	sub	r18, r24
 89a:	39 0b       	sbc	r19, r25
 89c:	c9 01       	movw	r24, r18
 89e:	08 95       	ret

000008a0 <__vector_11>:


  ISR(TIMER1_COMPA_vect)
  {
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 93       	push	r18
 8ac:	3f 93       	push	r19
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	ef 93       	push	r30
 8b4:	ff 93       	push	r31
	  uint16_t nTemp;																// Temporary storage

	  nTemp  = TCNT1;																// Get current time
 8b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 8ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	  nTemp -= OCR1A;																// Subtract interrupt time
 8be:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 8c2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8c6:	82 1b       	sub	r24, r18
 8c8:	93 0b       	sbc	r25, r19

	  if (nTemp < (TICKS_PER_MSECOND/2))											// If more than half period left
 8ca:	8c 3c       	cpi	r24, 0xCC	; 204
 8cc:	9c 41       	sbci	r25, 0x1C	; 28
 8ce:	48 f4       	brcc	.+18     	; 0x8e2 <__vector_11+0x42>
	  {
		  OCR1A += (TICKS_PER_MSECOND);											// Add Offset to OCR1A relative
 8d0:	e8 e8       	ldi	r30, 0x88	; 136
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	91 81       	ldd	r25, Z+1	; 0x01
 8d8:	87 56       	subi	r24, 0x67	; 103
 8da:	96 4c       	sbci	r25, 0xC6	; 198
 8dc:	91 83       	std	Z+1, r25	; 0x01
 8de:	80 83       	st	Z, r24
 8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <__vector_11+0x56>
	  }
	  else
	  {
		  OCR1A = TCNT1 + (TICKS_PER_MSECOND);									// Set OCR1A to 1 ms absolute
 8e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 8e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 8ea:	87 56       	subi	r24, 0x67	; 103
 8ec:	96 4c       	sbci	r25, 0xC6	; 198
 8ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	  }

	  globalTime++;															// Increment counter
 8f6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <globalTime>
 8fa:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <globalTime+0x1>
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <globalTime+0x1>
 904:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <globalTime>
	  localTime++;
 908:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <localTime>
 90c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <localTime+0x1>
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <localTime+0x1>
 916:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <localTime>
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	9f 91       	pop	r25
 920:	8f 91       	pop	r24
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__umulhisi3>:
 930:	a2 9f       	mul	r26, r18
 932:	b0 01       	movw	r22, r0
 934:	b3 9f       	mul	r27, r19
 936:	c0 01       	movw	r24, r0
 938:	a3 9f       	mul	r26, r19
 93a:	70 0d       	add	r23, r0
 93c:	81 1d       	adc	r24, r1
 93e:	11 24       	eor	r1, r1
 940:	91 1d       	adc	r25, r1
 942:	b2 9f       	mul	r27, r18
 944:	70 0d       	add	r23, r0
 946:	81 1d       	adc	r24, r1
 948:	11 24       	eor	r1, r1
 94a:	91 1d       	adc	r25, r1
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
